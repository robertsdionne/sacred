// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sacred/proto/conversation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sacred/proto/conversation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sacred {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Speaker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Speaker_reflection_ = NULL;
const ::google::protobuf::Descriptor* Word_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Word_reflection_ = NULL;
const ::google::protobuf::Descriptor* Utterance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Utterance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Turn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Turn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Conversation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Conversation_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto() {
  protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sacred/proto/conversation.proto");
  GOOGLE_CHECK(file != NULL);
  Speaker_descriptor_ = file->message_type(0);
  static const int Speaker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speaker, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speaker, name_),
  };
  Speaker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Speaker_descriptor_,
      Speaker::default_instance_,
      Speaker_offsets_,
      -1,
      -1,
      -1,
      sizeof(Speaker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speaker, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speaker, _is_default_instance_));
  Word_descriptor_ = file->message_type(1);
  static const int Word_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, spelling_),
  };
  Word_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Word_descriptor_,
      Word::default_instance_,
      Word_offsets_,
      -1,
      -1,
      -1,
      sizeof(Word),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _is_default_instance_));
  Utterance_descriptor_ = file->message_type(2);
  static const int Utterance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, text_),
  };
  Utterance_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Utterance_descriptor_,
      Utterance::default_instance_,
      Utterance_offsets_,
      -1,
      -1,
      -1,
      sizeof(Utterance),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, _is_default_instance_));
  Turn_descriptor_ = file->message_type(3);
  static const int Turn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, speaker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, utterance_),
  };
  Turn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Turn_descriptor_,
      Turn::default_instance_,
      Turn_offsets_,
      -1,
      -1,
      -1,
      sizeof(Turn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Turn, _is_default_instance_));
  Conversation_descriptor_ = file->message_type(4);
  static const int Conversation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conversation, turn_),
  };
  Conversation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Conversation_descriptor_,
      Conversation::default_instance_,
      Conversation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Conversation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conversation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conversation, _is_default_instance_));
  DataSet_descriptor_ = file->message_type(5);
  static const int DataSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSet, conversation_),
  };
  DataSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataSet_descriptor_,
      DataSet::default_instance_,
      DataSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSet, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Speaker_descriptor_, &Speaker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Word_descriptor_, &Word::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Utterance_descriptor_, &Utterance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Turn_descriptor_, &Turn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Conversation_descriptor_, &Conversation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataSet_descriptor_, &DataSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto() {
  delete Speaker::default_instance_;
  delete Speaker_reflection_;
  delete Word::default_instance_;
  delete Word_reflection_;
  delete Utterance::default_instance_;
  delete Utterance_reflection_;
  delete Turn::default_instance_;
  delete Turn_reflection_;
  delete Conversation::default_instance_;
  delete Conversation_reflection_;
  delete DataSet::default_instance_;
  delete DataSet_reflection_;
}

void protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037sacred/proto/conversation.proto\022\014sacre"
    "d.proto\"#\n\007Speaker\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002"
    " \001(\t\"$\n\004Word\022\n\n\002id\030\001 \001(\004\022\020\n\010spelling\030\002 \001"
    "(\t\";\n\tUtterance\022 \n\004word\030\001 \003(\0132\022.sacred.p"
    "roto.Word\022\014\n\004text\030\002 \001(\t\"Z\n\004Turn\022&\n\007speak"
    "er\030\001 \001(\0132\025.sacred.proto.Speaker\022*\n\tutter"
    "ance\030\002 \003(\0132\027.sacred.proto.Utterance\"0\n\014C"
    "onversation\022 \n\004turn\030\001 \003(\0132\022.sacred.proto"
    ".Turn\";\n\007DataSet\0220\n\014conversation\030\001 \003(\0132\032"
    ".sacred.proto.Conversationb\006proto3", 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sacred/proto/conversation.proto", &protobuf_RegisterTypes);
  Speaker::default_instance_ = new Speaker();
  Word::default_instance_ = new Word();
  Utterance::default_instance_ = new Utterance();
  Turn::default_instance_ = new Turn();
  Conversation::default_instance_ = new Conversation();
  DataSet::default_instance_ = new DataSet();
  Speaker::default_instance_->InitAsDefaultInstance();
  Word::default_instance_->InitAsDefaultInstance();
  Utterance::default_instance_->InitAsDefaultInstance();
  Turn::default_instance_->InitAsDefaultInstance();
  Conversation::default_instance_->InitAsDefaultInstance();
  DataSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sacred_2fproto_2fconversation_2eproto {
  StaticDescriptorInitializer_sacred_2fproto_2fconversation_2eproto() {
    protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  }
} static_descriptor_initializer_sacred_2fproto_2fconversation_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Speaker::kIdFieldNumber;
const int Speaker::kNameFieldNumber;
#endif  // !_MSC_VER

Speaker::Speaker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.Speaker)
}

void Speaker::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Speaker::Speaker(const Speaker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.Speaker)
}

void Speaker::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Speaker::~Speaker() {
  // @@protoc_insertion_point(destructor:sacred.proto.Speaker)
  SharedDtor();
}

void Speaker::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Speaker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Speaker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Speaker_descriptor_;
}

const Speaker& Speaker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  return *default_instance_;
}

Speaker* Speaker::default_instance_ = NULL;

Speaker* Speaker::New(::google::protobuf::Arena* arena) const {
  Speaker* n = new Speaker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Speaker::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Speaker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.Speaker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Speaker.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.Speaker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.Speaker)
  return false;
#undef DO_
}

void Speaker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.Speaker)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Speaker.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.Speaker)
}

::google::protobuf::uint8* Speaker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.Speaker)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Speaker.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.Speaker)
  return target;
}

int Speaker::ByteSize() const {
  int total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Speaker::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Speaker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Speaker>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Speaker::MergeFrom(const Speaker& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Speaker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speaker::CopyFrom(const Speaker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speaker::IsInitialized() const {

  return true;
}

void Speaker::Swap(Speaker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Speaker::InternalSwap(Speaker* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Speaker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Speaker_descriptor_;
  metadata.reflection = Speaker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Speaker

// optional uint64 id = 1;
void Speaker::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Speaker::id() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Speaker.id)
  return id_;
}
 void Speaker::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Speaker.id)
}

// optional string name = 2;
void Speaker::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Speaker::name() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Speaker.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Speaker::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Speaker.name)
}
 void Speaker::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Speaker.name)
}
 void Speaker::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Speaker.name)
}
 ::std::string* Speaker::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Speaker.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Speaker::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Speaker::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Speaker.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Word::kIdFieldNumber;
const int Word::kSpellingFieldNumber;
#endif  // !_MSC_VER

Word::Word()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.Word)
}

void Word::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Word::Word(const Word& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.Word)
}

void Word::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  spelling_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Word::~Word() {
  // @@protoc_insertion_point(destructor:sacred.proto.Word)
  SharedDtor();
}

void Word::SharedDtor() {
  spelling_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Word::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Word::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Word_descriptor_;
}

const Word& Word::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  return *default_instance_;
}

Word* Word::default_instance_ = NULL;

Word* Word::New(::google::protobuf::Arena* arena) const {
  Word* n = new Word;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Word::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  spelling_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Word::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.Word)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_spelling;
        break;
      }

      // optional string spelling = 2;
      case 2: {
        if (tag == 18) {
         parse_spelling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spelling()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spelling().data(), this->spelling().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Word.spelling"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.Word)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.Word)
  return false;
#undef DO_
}

void Word::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.Word)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string spelling = 2;
  if (this->spelling().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spelling().data(), this->spelling().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Word.spelling");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->spelling(), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.Word)
}

::google::protobuf::uint8* Word::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.Word)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string spelling = 2;
  if (this->spelling().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spelling().data(), this->spelling().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Word.spelling");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->spelling(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.Word)
  return target;
}

int Word::ByteSize() const {
  int total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional string spelling = 2;
  if (this->spelling().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spelling());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Word::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Word* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Word>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Word::MergeFrom(const Word& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.spelling().size() > 0) {

    spelling_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spelling_);
  }
}

void Word::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Word::CopyFrom(const Word& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Word::IsInitialized() const {

  return true;
}

void Word::Swap(Word* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Word::InternalSwap(Word* other) {
  std::swap(id_, other->id_);
  spelling_.Swap(&other->spelling_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Word::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Word_descriptor_;
  metadata.reflection = Word_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Word

// optional uint64 id = 1;
void Word::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Word::id() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Word.id)
  return id_;
}
 void Word::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Word.id)
}

// optional string spelling = 2;
void Word::clear_spelling() {
  spelling_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Word::spelling() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Word.spelling)
  return spelling_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Word::set_spelling(const ::std::string& value) {
  
  spelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Word.spelling)
}
 void Word::set_spelling(const char* value) {
  
  spelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Word.spelling)
}
 void Word::set_spelling(const char* value, size_t size) {
  
  spelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Word.spelling)
}
 ::std::string* Word::mutable_spelling() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Word.spelling)
  return spelling_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Word::release_spelling() {
  
  return spelling_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Word::set_allocated_spelling(::std::string* spelling) {
  if (spelling != NULL) {
    
  } else {
    
  }
  spelling_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spelling);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Word.spelling)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Utterance::kWordFieldNumber;
const int Utterance::kTextFieldNumber;
#endif  // !_MSC_VER

Utterance::Utterance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.Utterance)
}

void Utterance::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Utterance::Utterance(const Utterance& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.Utterance)
}

void Utterance::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Utterance::~Utterance() {
  // @@protoc_insertion_point(destructor:sacred.proto.Utterance)
  SharedDtor();
}

void Utterance::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Utterance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Utterance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Utterance_descriptor_;
}

const Utterance& Utterance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  return *default_instance_;
}

Utterance* Utterance::default_instance_ = NULL;

Utterance* Utterance::New(::google::protobuf::Arena* arena) const {
  Utterance* n = new Utterance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Utterance::Clear() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  word_.Clear();
}

bool Utterance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.Utterance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sacred.proto.Word word = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_word()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_word;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Utterance.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.Utterance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.Utterance)
  return false;
#undef DO_
}

void Utterance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.Utterance)
  // repeated .sacred.proto.Word word = 1;
  for (unsigned int i = 0, n = this->word_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->word(i), output);
  }

  // optional string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Utterance.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.Utterance)
}

::google::protobuf::uint8* Utterance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.Utterance)
  // repeated .sacred.proto.Word word = 1;
  for (unsigned int i = 0, n = this->word_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->word(i), target);
  }

  // optional string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Utterance.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.Utterance)
  return target;
}

int Utterance::ByteSize() const {
  int total_size = 0;

  // optional string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // repeated .sacred.proto.Word word = 1;
  total_size += 1 * this->word_size();
  for (int i = 0; i < this->word_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->word(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Utterance::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Utterance* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Utterance>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Utterance::MergeFrom(const Utterance& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  word_.MergeFrom(from.word_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void Utterance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utterance::CopyFrom(const Utterance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utterance::IsInitialized() const {

  return true;
}

void Utterance::Swap(Utterance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Utterance::InternalSwap(Utterance* other) {
  word_.UnsafeArenaSwap(&other->word_);
  text_.Swap(&other->text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Utterance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Utterance_descriptor_;
  metadata.reflection = Utterance_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Utterance

// repeated .sacred.proto.Word word = 1;
int Utterance::word_size() const {
  return word_.size();
}
void Utterance::clear_word() {
  word_.Clear();
}
const ::sacred::proto::Word& Utterance::word(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Utterance.word)
  return word_.Get(index);
}
::sacred::proto::Word* Utterance::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.Utterance.word)
  return word_.Mutable(index);
}
::sacred::proto::Word* Utterance::add_word() {
  // @@protoc_insertion_point(field_add:sacred.proto.Utterance.word)
  return word_.Add();
}
::google::protobuf::RepeatedPtrField< ::sacred::proto::Word >*
Utterance::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Utterance.word)
  return &word_;
}
const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Word >&
Utterance::word() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Utterance.word)
  return word_;
}

// optional string text = 2;
void Utterance::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Utterance::text() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Utterance.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Utterance::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Utterance.text)
}
 void Utterance::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Utterance.text)
}
 void Utterance::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Utterance.text)
}
 ::std::string* Utterance::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Utterance.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Utterance::release_text() {
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Utterance::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Utterance.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Turn::kSpeakerFieldNumber;
const int Turn::kUtteranceFieldNumber;
#endif  // !_MSC_VER

Turn::Turn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.Turn)
}

void Turn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  speaker_ = const_cast< ::sacred::proto::Speaker*>(&::sacred::proto::Speaker::default_instance());
}

Turn::Turn(const Turn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.Turn)
}

void Turn::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  speaker_ = NULL;
}

Turn::~Turn() {
  // @@protoc_insertion_point(destructor:sacred.proto.Turn)
  SharedDtor();
}

void Turn::SharedDtor() {
  if (this != default_instance_) {
    delete speaker_;
  }
}

void Turn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Turn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Turn_descriptor_;
}

const Turn& Turn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  return *default_instance_;
}

Turn* Turn::default_instance_ = NULL;

Turn* Turn::New(::google::protobuf::Arena* arena) const {
  Turn* n = new Turn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Turn::Clear() {
  if (GetArenaNoVirtual() == NULL && speaker_ != NULL) delete speaker_;
  speaker_ = NULL;
  utterance_.Clear();
}

bool Turn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.Turn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sacred.proto.Speaker speaker = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speaker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_utterance;
        break;
      }

      // repeated .sacred.proto.Utterance utterance = 2;
      case 2: {
        if (tag == 18) {
         parse_utterance:
          DO_(input->IncrementRecursionDepth());
         parse_loop_utterance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_utterance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_utterance;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.Turn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.Turn)
  return false;
#undef DO_
}

void Turn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.Turn)
  // optional .sacred.proto.Speaker speaker = 1;
  if (this->has_speaker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->speaker_, output);
  }

  // repeated .sacred.proto.Utterance utterance = 2;
  for (unsigned int i = 0, n = this->utterance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->utterance(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.Turn)
}

::google::protobuf::uint8* Turn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.Turn)
  // optional .sacred.proto.Speaker speaker = 1;
  if (this->has_speaker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->speaker_, target);
  }

  // repeated .sacred.proto.Utterance utterance = 2;
  for (unsigned int i = 0, n = this->utterance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->utterance(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.Turn)
  return target;
}

int Turn::ByteSize() const {
  int total_size = 0;

  // optional .sacred.proto.Speaker speaker = 1;
  if (this->has_speaker()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->speaker_);
  }

  // repeated .sacred.proto.Utterance utterance = 2;
  total_size += 1 * this->utterance_size();
  for (int i = 0; i < this->utterance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utterance(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Turn::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Turn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Turn>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Turn::MergeFrom(const Turn& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  utterance_.MergeFrom(from.utterance_);
  if (from.has_speaker()) {
    mutable_speaker()->::sacred::proto::Speaker::MergeFrom(from.speaker());
  }
}

void Turn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn::CopyFrom(const Turn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn::IsInitialized() const {

  return true;
}

void Turn::Swap(Turn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Turn::InternalSwap(Turn* other) {
  std::swap(speaker_, other->speaker_);
  utterance_.UnsafeArenaSwap(&other->utterance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Turn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Turn_descriptor_;
  metadata.reflection = Turn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Turn

// optional .sacred.proto.Speaker speaker = 1;
bool Turn::has_speaker() const {
  return !_is_default_instance_ && speaker_ != NULL;
}
void Turn::clear_speaker() {
  if (GetArenaNoVirtual() == NULL && speaker_ != NULL) delete speaker_;
  speaker_ = NULL;
}
const ::sacred::proto::Speaker& Turn::speaker() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Turn.speaker)
  return speaker_ != NULL ? *speaker_ : *default_instance_->speaker_;
}
::sacred::proto::Speaker* Turn::mutable_speaker() {
  
  if (speaker_ == NULL) {
    speaker_ = new ::sacred::proto::Speaker;
  }
  // @@protoc_insertion_point(field_mutable:sacred.proto.Turn.speaker)
  return speaker_;
}
::sacred::proto::Speaker* Turn::release_speaker() {
  
  ::sacred::proto::Speaker* temp = speaker_;
  speaker_ = NULL;
  return temp;
}
void Turn::set_allocated_speaker(::sacred::proto::Speaker* speaker) {
  delete speaker_;
  speaker_ = speaker;
  if (speaker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Turn.speaker)
}

// repeated .sacred.proto.Utterance utterance = 2;
int Turn::utterance_size() const {
  return utterance_.size();
}
void Turn::clear_utterance() {
  utterance_.Clear();
}
const ::sacred::proto::Utterance& Turn::utterance(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Turn.utterance)
  return utterance_.Get(index);
}
::sacred::proto::Utterance* Turn::mutable_utterance(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.Turn.utterance)
  return utterance_.Mutable(index);
}
::sacred::proto::Utterance* Turn::add_utterance() {
  // @@protoc_insertion_point(field_add:sacred.proto.Turn.utterance)
  return utterance_.Add();
}
::google::protobuf::RepeatedPtrField< ::sacred::proto::Utterance >*
Turn::mutable_utterance() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Turn.utterance)
  return &utterance_;
}
const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Utterance >&
Turn::utterance() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Turn.utterance)
  return utterance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Conversation::kTurnFieldNumber;
#endif  // !_MSC_VER

Conversation::Conversation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.Conversation)
}

void Conversation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Conversation::Conversation(const Conversation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.Conversation)
}

void Conversation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Conversation::~Conversation() {
  // @@protoc_insertion_point(destructor:sacred.proto.Conversation)
  SharedDtor();
}

void Conversation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Conversation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conversation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Conversation_descriptor_;
}

const Conversation& Conversation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  return *default_instance_;
}

Conversation* Conversation::default_instance_ = NULL;

Conversation* Conversation::New(::google::protobuf::Arena* arena) const {
  Conversation* n = new Conversation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Conversation::Clear() {
  turn_.Clear();
}

bool Conversation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.Conversation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sacred.proto.Turn turn = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_turn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_turn;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.Conversation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.Conversation)
  return false;
#undef DO_
}

void Conversation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.Conversation)
  // repeated .sacred.proto.Turn turn = 1;
  for (unsigned int i = 0, n = this->turn_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->turn(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.Conversation)
}

::google::protobuf::uint8* Conversation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.Conversation)
  // repeated .sacred.proto.Turn turn = 1;
  for (unsigned int i = 0, n = this->turn_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->turn(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.Conversation)
  return target;
}

int Conversation::ByteSize() const {
  int total_size = 0;

  // repeated .sacred.proto.Turn turn = 1;
  total_size += 1 * this->turn_size();
  for (int i = 0; i < this->turn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turn(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conversation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Conversation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Conversation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Conversation::MergeFrom(const Conversation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  turn_.MergeFrom(from.turn_);
}

void Conversation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conversation::CopyFrom(const Conversation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conversation::IsInitialized() const {

  return true;
}

void Conversation::Swap(Conversation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Conversation::InternalSwap(Conversation* other) {
  turn_.UnsafeArenaSwap(&other->turn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Conversation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Conversation_descriptor_;
  metadata.reflection = Conversation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Conversation

// repeated .sacred.proto.Turn turn = 1;
int Conversation::turn_size() const {
  return turn_.size();
}
void Conversation::clear_turn() {
  turn_.Clear();
}
const ::sacred::proto::Turn& Conversation::turn(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Conversation.turn)
  return turn_.Get(index);
}
::sacred::proto::Turn* Conversation::mutable_turn(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.Conversation.turn)
  return turn_.Mutable(index);
}
::sacred::proto::Turn* Conversation::add_turn() {
  // @@protoc_insertion_point(field_add:sacred.proto.Conversation.turn)
  return turn_.Add();
}
::google::protobuf::RepeatedPtrField< ::sacred::proto::Turn >*
Conversation::mutable_turn() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Conversation.turn)
  return &turn_;
}
const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Turn >&
Conversation::turn() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Conversation.turn)
  return turn_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DataSet::kConversationFieldNumber;
#endif  // !_MSC_VER

DataSet::DataSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.DataSet)
}

void DataSet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataSet::DataSet(const DataSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.DataSet)
}

void DataSet::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DataSet::~DataSet() {
  // @@protoc_insertion_point(destructor:sacred.proto.DataSet)
  SharedDtor();
}

void DataSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSet_descriptor_;
}

const DataSet& DataSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  return *default_instance_;
}

DataSet* DataSet::default_instance_ = NULL;

DataSet* DataSet::New(::google::protobuf::Arena* arena) const {
  DataSet* n = new DataSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSet::Clear() {
  conversation_.Clear();
}

bool DataSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.DataSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sacred.proto.Conversation conversation = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_conversation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_conversation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_conversation;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.DataSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.DataSet)
  return false;
#undef DO_
}

void DataSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.DataSet)
  // repeated .sacred.proto.Conversation conversation = 1;
  for (unsigned int i = 0, n = this->conversation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->conversation(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.DataSet)
}

::google::protobuf::uint8* DataSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.DataSet)
  // repeated .sacred.proto.Conversation conversation = 1;
  for (unsigned int i = 0, n = this->conversation_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->conversation(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.DataSet)
  return target;
}

int DataSet::ByteSize() const {
  int total_size = 0;

  // repeated .sacred.proto.Conversation conversation = 1;
  total_size += 1 * this->conversation_size();
  for (int i = 0; i < this->conversation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conversation(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSet>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSet::MergeFrom(const DataSet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  conversation_.MergeFrom(from.conversation_);
}

void DataSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSet::CopyFrom(const DataSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSet::IsInitialized() const {

  return true;
}

void DataSet::Swap(DataSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSet::InternalSwap(DataSet* other) {
  conversation_.UnsafeArenaSwap(&other->conversation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSet_descriptor_;
  metadata.reflection = DataSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSet

// repeated .sacred.proto.Conversation conversation = 1;
int DataSet::conversation_size() const {
  return conversation_.size();
}
void DataSet::clear_conversation() {
  conversation_.Clear();
}
const ::sacred::proto::Conversation& DataSet::conversation(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.DataSet.conversation)
  return conversation_.Get(index);
}
::sacred::proto::Conversation* DataSet::mutable_conversation(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.DataSet.conversation)
  return conversation_.Mutable(index);
}
::sacred::proto::Conversation* DataSet::add_conversation() {
  // @@protoc_insertion_point(field_add:sacred.proto.DataSet.conversation)
  return conversation_.Add();
}
::google::protobuf::RepeatedPtrField< ::sacred::proto::Conversation >*
DataSet::mutable_conversation() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.DataSet.conversation)
  return &conversation_;
}
const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Conversation >&
DataSet::conversation() const {
  // @@protoc_insertion_point(field_list:sacred.proto.DataSet.conversation)
  return conversation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sacred

// @@protoc_insertion_point(global_scope)
