// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sacred/proto/opencl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sacred/proto/opencl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sacred {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* OpenCl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenCl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Platform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Platform_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_FloatingPointConfiguration_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_MemoryCacheType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_LocalMemoryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_ExecutionCapability_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_QueueProperty_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sacred_2fproto_2fopencl_2eproto() {
  protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sacred/proto/opencl.proto");
  GOOGLE_CHECK(file != NULL);
  OpenCl_descriptor_ = file->message_type(0);
  static const int OpenCl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenCl, platform_),
  };
  OpenCl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenCl_descriptor_,
      OpenCl::default_instance_,
      OpenCl_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpenCl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenCl, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenCl, _is_default_instance_));
  Platform_descriptor_ = file->message_type(1);
  static const int Platform_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, extensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, device_),
  };
  Platform_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Platform_descriptor_,
      Platform::default_instance_,
      Platform_offsets_,
      -1,
      -1,
      -1,
      sizeof(Platform),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, _is_default_instance_));
  Device_descriptor_ = file->message_type(2);
  static const int Device_offsets_[58] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, vendor_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_compute_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_work_item_dimensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_work_item_sizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_work_group_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, preferred_vector_width_character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, preferred_vector_width_short_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, preferred_vector_width_integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, preferred_vector_width_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, preferred_vector_width_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, preferred_vector_width_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, preferred_vector_width_half_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, native_vector_width_character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, native_vector_width_short_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, native_vector_width_integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, native_vector_width_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, native_vector_width_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, native_vector_width_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, native_vector_width_half_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, address_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_memory_allocation_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, image_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_read_image_arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_write_image_arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, image2d_maximum_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, image2d_maximum_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, image3d_maximum_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, image3d_maximum_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, image3d_maximum_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_samplers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_parameter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, memory_base_address_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, minimum_data_type_alignment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, single_floating_point_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, global_memory_cache_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, global_memory_cacheline_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, global_memory_cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, global_memory_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_constant_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maximum_constant_arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, local_memory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, local_memory_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, error_correction_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, host_unified_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, profiling_timer_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, endian_little_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, compiler_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, execution_capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, queue_properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, driver_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, opencl_c_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, extensions_),
  };
  Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      -1,
      -1,
      -1,
      sizeof(Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _is_default_instance_));
  Device_Type_descriptor_ = Device_descriptor_->enum_type(0);
  Device_FloatingPointConfiguration_descriptor_ = Device_descriptor_->enum_type(1);
  Device_MemoryCacheType_descriptor_ = Device_descriptor_->enum_type(2);
  Device_LocalMemoryType_descriptor_ = Device_descriptor_->enum_type(3);
  Device_ExecutionCapability_descriptor_ = Device_descriptor_->enum_type(4);
  Device_QueueProperty_descriptor_ = Device_descriptor_->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sacred_2fproto_2fopencl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenCl_descriptor_, &OpenCl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Platform_descriptor_, &Platform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Device_descriptor_, &Device::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sacred_2fproto_2fopencl_2eproto() {
  delete OpenCl::default_instance_;
  delete OpenCl_reflection_;
  delete Platform::default_instance_;
  delete Platform_reflection_;
  delete Device::default_instance_;
  delete Device_reflection_;
}

void protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031sacred/proto/opencl.proto\022\014sacred.prot"
    "o\"2\n\006OpenCl\022(\n\010platform\030\001 \003(\0132\026.sacred.p"
    "roto.Platform\"\204\001\n\010Platform\022\017\n\007profile\030\001 "
    "\001(\t\022\017\n\007version\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\016\n\006ve"
    "ndor\030\004 \001(\t\022\022\n\nextensions\030\005 \001(\t\022$\n\006device"
    "\030\006 \003(\0132\024.sacred.proto.Device\"\274\025\n\006Device\022"
    "\'\n\004type\030\001 \001(\0162\031.sacred.proto.Device.Type"
    "\022\031\n\021vendor_identifier\030\002 \001(\r\022\035\n\025maximum_c"
    "ompute_units\030\003 \001(\r\022$\n\034maximum_work_item_"
    "dimensions\030\004 \001(\r\022\037\n\027maximum_work_item_si"
    "zes\030\005 \003(\004\022\037\n\027maximum_work_group_size\030\006 \001"
    "(\004\022(\n preferred_vector_width_character\030\007"
    " \001(\r\022$\n\034preferred_vector_width_short\030\010 \001"
    "(\r\022&\n\036preferred_vector_width_integer\030\t \001"
    "(\r\022#\n\033preferred_vector_width_long\030\n \001(\r\022"
    "$\n\034preferred_vector_width_float\030\013 \001(\r\022%\n"
    "\035preferred_vector_width_double\030\014 \001(\r\022#\n\033"
    "preferred_vector_width_half\030\r \001(\r\022%\n\035nat"
    "ive_vector_width_character\030\016 \001(\r\022!\n\031nati"
    "ve_vector_width_short\030\017 \001(\r\022#\n\033native_ve"
    "ctor_width_integer\030\020 \001(\r\022 \n\030native_vecto"
    "r_width_long\030\021 \001(\r\022!\n\031native_vector_widt"
    "h_float\030\022 \001(\r\022\"\n\032native_vector_width_dou"
    "ble\030\023 \001(\r\022 \n\030native_vector_width_half\030\024 "
    "\001(\r\022\024\n\014address_bits\030\025 \001(\r\022&\n\036maximum_mem"
    "ory_allocation_size\030\026 \001(\004\022\025\n\rimage_suppo"
    "rt\030\027 \001(\010\022$\n\034maximum_read_image_arguments"
    "\030\030 \001(\r\022%\n\035maximum_write_image_arguments\030"
    "\031 \001(\r\022\035\n\025image2d_maximum_width\030\032 \001(\004\022\036\n\026"
    "image2d_maximum_height\030\033 \001(\004\022\035\n\025image3d_"
    "maximum_width\030\034 \001(\004\022\036\n\026image3d_maximum_h"
    "eight\030\035 \001(\004\022\035\n\025image3d_maximum_depth\030\036 \001"
    "(\004\022\030\n\020maximum_samplers\030\037 \001(\r\022\036\n\026maximum_"
    "parameter_size\030  \001(\004\022%\n\035memory_base_addr"
    "ess_alignment\030! \001(\r\022(\n minimum_data_type"
    "_alignment_size\030\" \001(\r\022\\\n#single_floating"
    "_point_configuration\030# \003(\0162/.sacred.prot"
    "o.Device.FloatingPointConfiguration\022F\n\030g"
    "lobal_memory_cache_type\030$ \001(\0162$.sacred.p"
    "roto.Device.MemoryCacheType\022$\n\034global_me"
    "mory_cacheline_size\030% \001(\r\022 \n\030global_memo"
    "ry_cache_size\030& \001(\004\022\032\n\022global_memory_siz"
    "e\030\' \001(\004\022$\n\034maximum_constant_buffer_size\030"
    "( \001(\004\022\"\n\032maximum_constant_arguments\030) \001("
    "\r\022\?\n\021local_memory_type\030* \001(\0162$.sacred.pr"
    "oto.Device.LocalMemoryType\022\031\n\021local_memo"
    "ry_size\030+ \001(\004\022 \n\030error_correction_suppor"
    "t\030, \001(\010\022\033\n\023host_unified_memory\030- \001(\010\022\"\n\032"
    "profiling_timer_resolution\030. \001(\004\022\025\n\rendi"
    "an_little\030/ \001(\010\022\021\n\tavailable\0300 \001(\010\022\032\n\022co"
    "mpiler_available\0301 \001(\010\022H\n\026execution_capa"
    "bilities\0302 \003(\0162(.sacred.proto.Device.Exe"
    "cutionCapability\022<\n\020queue_properties\0303 \003"
    "(\0162\".sacred.proto.Device.QueueProperty\022\014"
    "\n\004name\0304 \001(\t\022\016\n\006vendor\0305 \001(\t\022\026\n\016driver_v"
    "ersion\0306 \001(\t\022\017\n\007profile\0307 \001(\t\022\017\n\007version"
    "\0308 \001(\t\022\030\n\020opencl_c_version\0309 \001(\t\022\022\n\nexte"
    "nsions\030: \001(\t\"Q\n\004Type\022\r\n\tTYPE_NONE\020\000\022\013\n\007D"
    "EFAULT\020\001\022\007\n\003CPU\020\002\022\007\n\003GPU\020\004\022\017\n\013ACCELERATO"
    "R\020\010\022\n\n\006CUSTOM\020\020\"\222\002\n\032FloatingPointConfigu"
    "ration\022%\n!FLOATING_POINT_CONFIGURATION_N"
    "ONE\020\000\022\020\n\014DENORMALIZED\020\001\022\031\n\025INFINITY_NOT_"
    "A_NUMBER\020\002\022\024\n\020ROUND_TO_NEAREST\020\004\022\021\n\rROUN"
    "D_TO_ZERO\020\010\022\025\n\021ROUND_TO_INFINITY\020\020\022\037\n\033RO"
    "UND_TO_FUSED_MULTIPLY_ADD\020 \022\033\n\027ROUND_TO_"
    "SOFTWARE_FLOAT\020@\022\"\n\035CORRECTLY_ROUNDED_DI"
    "VIDE_SQRT\020\200\001\"G\n\017MemoryCacheType\022\025\n\021MEMOR"
    "Y_CACHE_NONE\020\000\022\r\n\tREAD_ONLY\020\001\022\016\n\nREAD_WR"
    "ITE\020\002\"\?\n\017LocalMemoryType\022\025\n\021LOCAL_MEMORY"
    "_NONE\020\000\022\t\n\005LOCAL\020\001\022\n\n\006GLOBAL\020\002\"S\n\023Execut"
    "ionCapability\022\035\n\031EXECUTION_CAPABILITY_NO"
    "NE\020\000\022\n\n\006KERNEL\020\001\022\021\n\rNATIVE_KERNEL\020\002\"f\n\rQ"
    "ueueProperty\022\027\n\023QUEUE_PROPERTY_NONE\020\000\022&\n"
    "\"OUT_OF_ORDER_EXECUTION_MODE_ENABLE\020\001\022\024\n"
    "\020PROFILING_ENABLE\020\002b\006proto3", 2987);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sacred/proto/opencl.proto", &protobuf_RegisterTypes);
  OpenCl::default_instance_ = new OpenCl();
  Platform::default_instance_ = new Platform();
  Device::default_instance_ = new Device();
  OpenCl::default_instance_->InitAsDefaultInstance();
  Platform::default_instance_->InitAsDefaultInstance();
  Device::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sacred_2fproto_2fopencl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sacred_2fproto_2fopencl_2eproto {
  StaticDescriptorInitializer_sacred_2fproto_2fopencl_2eproto() {
    protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
  }
} static_descriptor_initializer_sacred_2fproto_2fopencl_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int OpenCl::kPlatformFieldNumber;
#endif  // !_MSC_VER

OpenCl::OpenCl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.OpenCl)
}

void OpenCl::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OpenCl::OpenCl(const OpenCl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.OpenCl)
}

void OpenCl::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

OpenCl::~OpenCl() {
  // @@protoc_insertion_point(destructor:sacred.proto.OpenCl)
  SharedDtor();
}

void OpenCl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenCl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenCl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenCl_descriptor_;
}

const OpenCl& OpenCl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
  return *default_instance_;
}

OpenCl* OpenCl::default_instance_ = NULL;

OpenCl* OpenCl::New(::google::protobuf::Arena* arena) const {
  OpenCl* n = new OpenCl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenCl::Clear() {
  platform_.Clear();
}

bool OpenCl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.OpenCl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sacred.proto.Platform platform = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_platform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_platform;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.OpenCl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.OpenCl)
  return false;
#undef DO_
}

void OpenCl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.OpenCl)
  // repeated .sacred.proto.Platform platform = 1;
  for (unsigned int i = 0, n = this->platform_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->platform(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.OpenCl)
}

::google::protobuf::uint8* OpenCl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.OpenCl)
  // repeated .sacred.proto.Platform platform = 1;
  for (unsigned int i = 0, n = this->platform_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->platform(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.OpenCl)
  return target;
}

int OpenCl::ByteSize() const {
  int total_size = 0;

  // repeated .sacred.proto.Platform platform = 1;
  total_size += 1 * this->platform_size();
  for (int i = 0; i < this->platform_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->platform(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenCl::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpenCl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenCl>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenCl::MergeFrom(const OpenCl& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  platform_.MergeFrom(from.platform_);
}

void OpenCl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenCl::CopyFrom(const OpenCl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenCl::IsInitialized() const {

  return true;
}

void OpenCl::Swap(OpenCl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenCl::InternalSwap(OpenCl* other) {
  platform_.UnsafeArenaSwap(&other->platform_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenCl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenCl_descriptor_;
  metadata.reflection = OpenCl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenCl

// repeated .sacred.proto.Platform platform = 1;
int OpenCl::platform_size() const {
  return platform_.size();
}
void OpenCl::clear_platform() {
  platform_.Clear();
}
const ::sacred::proto::Platform& OpenCl::platform(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.OpenCl.platform)
  return platform_.Get(index);
}
::sacred::proto::Platform* OpenCl::mutable_platform(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.OpenCl.platform)
  return platform_.Mutable(index);
}
::sacred::proto::Platform* OpenCl::add_platform() {
  // @@protoc_insertion_point(field_add:sacred.proto.OpenCl.platform)
  return platform_.Add();
}
::google::protobuf::RepeatedPtrField< ::sacred::proto::Platform >*
OpenCl::mutable_platform() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.OpenCl.platform)
  return &platform_;
}
const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Platform >&
OpenCl::platform() const {
  // @@protoc_insertion_point(field_list:sacred.proto.OpenCl.platform)
  return platform_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Platform::kProfileFieldNumber;
const int Platform::kVersionFieldNumber;
const int Platform::kNameFieldNumber;
const int Platform::kVendorFieldNumber;
const int Platform::kExtensionsFieldNumber;
const int Platform::kDeviceFieldNumber;
#endif  // !_MSC_VER

Platform::Platform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.Platform)
}

void Platform::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Platform::Platform(const Platform& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.Platform)
}

void Platform::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  profile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extensions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Platform::~Platform() {
  // @@protoc_insertion_point(destructor:sacred.proto.Platform)
  SharedDtor();
}

void Platform::SharedDtor() {
  profile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extensions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Platform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Platform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Platform_descriptor_;
}

const Platform& Platform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
  return *default_instance_;
}

Platform* Platform::default_instance_ = NULL;

Platform* Platform::New(::google::protobuf::Arena* arena) const {
  Platform* n = new Platform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Platform::Clear() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.Clear();
}

bool Platform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.Platform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string profile = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->profile().data(), this->profile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Platform.profile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Platform.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Platform.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vendor;
        break;
      }

      // optional string vendor = 4;
      case 4: {
        if (tag == 34) {
         parse_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Platform.vendor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extensions;
        break;
      }

      // optional string extensions = 5;
      case 5: {
        if (tag == 42) {
         parse_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extensions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extensions().data(), this->extensions().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Platform.extensions"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // repeated .sacred.proto.Device device = 6;
      case 6: {
        if (tag == 50) {
         parse_device:
          DO_(input->IncrementRecursionDepth());
         parse_loop_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_device;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.Platform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.Platform)
  return false;
#undef DO_
}

void Platform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.Platform)
  // optional string profile = 1;
  if (this->profile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.profile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->profile(), output);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string vendor = 4;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vendor(), output);
  }

  // optional string extensions = 5;
  if (this->extensions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extensions().data(), this->extensions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.extensions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extensions(), output);
  }

  // repeated .sacred.proto.Device device = 6;
  for (unsigned int i = 0, n = this->device_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->device(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.Platform)
}

::google::protobuf::uint8* Platform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.Platform)
  // optional string profile = 1;
  if (this->profile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.profile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->profile(), target);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string vendor = 4;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vendor(), target);
  }

  // optional string extensions = 5;
  if (this->extensions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extensions().data(), this->extensions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Platform.extensions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extensions(), target);
  }

  // repeated .sacred.proto.Device device = 6;
  for (unsigned int i = 0, n = this->device_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->device(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.Platform)
  return target;
}

int Platform::ByteSize() const {
  int total_size = 0;

  // optional string profile = 1;
  if (this->profile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profile());
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string vendor = 4;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor());
  }

  // optional string extensions = 5;
  if (this->extensions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extensions());
  }

  // repeated .sacred.proto.Device device = 6;
  total_size += 1 * this->device_size();
  for (int i = 0; i < this->device_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Platform::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Platform* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Platform>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Platform::MergeFrom(const Platform& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  device_.MergeFrom(from.device_);
  if (from.profile().size() > 0) {

    profile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.vendor().size() > 0) {

    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.extensions().size() > 0) {

    extensions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extensions_);
  }
}

void Platform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Platform::CopyFrom(const Platform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Platform::IsInitialized() const {

  return true;
}

void Platform::Swap(Platform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Platform::InternalSwap(Platform* other) {
  profile_.Swap(&other->profile_);
  version_.Swap(&other->version_);
  name_.Swap(&other->name_);
  vendor_.Swap(&other->vendor_);
  extensions_.Swap(&other->extensions_);
  device_.UnsafeArenaSwap(&other->device_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Platform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Platform_descriptor_;
  metadata.reflection = Platform_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Platform

// optional string profile = 1;
void Platform::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Platform::profile() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.profile)
  return profile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.profile)
}
 void Platform::set_profile(const char* value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.profile)
}
 void Platform::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.profile)
}
 ::std::string* Platform::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Platform::release_profile() {
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.profile)
}

// optional string version = 2;
void Platform::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Platform::version() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.version)
}
 void Platform::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.version)
}
 void Platform::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.version)
}
 ::std::string* Platform::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Platform::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.version)
}

// optional string name = 3;
void Platform::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Platform::name() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.name)
}
 void Platform::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.name)
}
 void Platform::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.name)
}
 ::std::string* Platform::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Platform::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.name)
}

// optional string vendor = 4;
void Platform::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Platform::vendor() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.vendor)
}
 void Platform::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.vendor)
}
 void Platform::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.vendor)
}
 ::std::string* Platform::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Platform::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.vendor)
}

// optional string extensions = 5;
void Platform::clear_extensions() {
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Platform::extensions() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.extensions)
  return extensions_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_extensions(const ::std::string& value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.extensions)
}
 void Platform::set_extensions(const char* value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.extensions)
}
 void Platform::set_extensions(const char* value, size_t size) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.extensions)
}
 ::std::string* Platform::mutable_extensions() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.extensions)
  return extensions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Platform::release_extensions() {
  
  return extensions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Platform::set_allocated_extensions(::std::string* extensions) {
  if (extensions != NULL) {
    
  } else {
    
  }
  extensions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extensions);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.extensions)
}

// repeated .sacred.proto.Device device = 6;
int Platform::device_size() const {
  return device_.size();
}
void Platform::clear_device() {
  device_.Clear();
}
const ::sacred::proto::Device& Platform::device(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.device)
  return device_.Get(index);
}
::sacred::proto::Device* Platform::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.device)
  return device_.Mutable(index);
}
::sacred::proto::Device* Platform::add_device() {
  // @@protoc_insertion_point(field_add:sacred.proto.Platform.device)
  return device_.Add();
}
::google::protobuf::RepeatedPtrField< ::sacred::proto::Device >*
Platform::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Platform.device)
  return &device_;
}
const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Device >&
Platform::device() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Platform.device)
  return device_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Device_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_Type_descriptor_;
}
bool Device_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Device_Type Device::TYPE_NONE;
const Device_Type Device::DEFAULT;
const Device_Type Device::CPU;
const Device_Type Device::GPU;
const Device_Type Device::ACCELERATOR;
const Device_Type Device::CUSTOM;
const Device_Type Device::Type_MIN;
const Device_Type Device::Type_MAX;
const int Device::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Device_FloatingPointConfiguration_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_FloatingPointConfiguration_descriptor_;
}
bool Device_FloatingPointConfiguration_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Device_FloatingPointConfiguration Device::FLOATING_POINT_CONFIGURATION_NONE;
const Device_FloatingPointConfiguration Device::DENORMALIZED;
const Device_FloatingPointConfiguration Device::INFINITY_NOT_A_NUMBER;
const Device_FloatingPointConfiguration Device::ROUND_TO_NEAREST;
const Device_FloatingPointConfiguration Device::ROUND_TO_ZERO;
const Device_FloatingPointConfiguration Device::ROUND_TO_INFINITY;
const Device_FloatingPointConfiguration Device::ROUND_TO_FUSED_MULTIPLY_ADD;
const Device_FloatingPointConfiguration Device::ROUND_TO_SOFTWARE_FLOAT;
const Device_FloatingPointConfiguration Device::CORRECTLY_ROUNDED_DIVIDE_SQRT;
const Device_FloatingPointConfiguration Device::FloatingPointConfiguration_MIN;
const Device_FloatingPointConfiguration Device::FloatingPointConfiguration_MAX;
const int Device::FloatingPointConfiguration_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Device_MemoryCacheType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_MemoryCacheType_descriptor_;
}
bool Device_MemoryCacheType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Device_MemoryCacheType Device::MEMORY_CACHE_NONE;
const Device_MemoryCacheType Device::READ_ONLY;
const Device_MemoryCacheType Device::READ_WRITE;
const Device_MemoryCacheType Device::MemoryCacheType_MIN;
const Device_MemoryCacheType Device::MemoryCacheType_MAX;
const int Device::MemoryCacheType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Device_LocalMemoryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_LocalMemoryType_descriptor_;
}
bool Device_LocalMemoryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Device_LocalMemoryType Device::LOCAL_MEMORY_NONE;
const Device_LocalMemoryType Device::LOCAL;
const Device_LocalMemoryType Device::GLOBAL;
const Device_LocalMemoryType Device::LocalMemoryType_MIN;
const Device_LocalMemoryType Device::LocalMemoryType_MAX;
const int Device::LocalMemoryType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Device_ExecutionCapability_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_ExecutionCapability_descriptor_;
}
bool Device_ExecutionCapability_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Device_ExecutionCapability Device::EXECUTION_CAPABILITY_NONE;
const Device_ExecutionCapability Device::KERNEL;
const Device_ExecutionCapability Device::NATIVE_KERNEL;
const Device_ExecutionCapability Device::ExecutionCapability_MIN;
const Device_ExecutionCapability Device::ExecutionCapability_MAX;
const int Device::ExecutionCapability_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Device_QueueProperty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_QueueProperty_descriptor_;
}
bool Device_QueueProperty_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Device_QueueProperty Device::QUEUE_PROPERTY_NONE;
const Device_QueueProperty Device::OUT_OF_ORDER_EXECUTION_MODE_ENABLE;
const Device_QueueProperty Device::PROFILING_ENABLE;
const Device_QueueProperty Device::QueueProperty_MIN;
const Device_QueueProperty Device::QueueProperty_MAX;
const int Device::QueueProperty_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Device::kTypeFieldNumber;
const int Device::kVendorIdentifierFieldNumber;
const int Device::kMaximumComputeUnitsFieldNumber;
const int Device::kMaximumWorkItemDimensionsFieldNumber;
const int Device::kMaximumWorkItemSizesFieldNumber;
const int Device::kMaximumWorkGroupSizeFieldNumber;
const int Device::kPreferredVectorWidthCharacterFieldNumber;
const int Device::kPreferredVectorWidthShortFieldNumber;
const int Device::kPreferredVectorWidthIntegerFieldNumber;
const int Device::kPreferredVectorWidthLongFieldNumber;
const int Device::kPreferredVectorWidthFloatFieldNumber;
const int Device::kPreferredVectorWidthDoubleFieldNumber;
const int Device::kPreferredVectorWidthHalfFieldNumber;
const int Device::kNativeVectorWidthCharacterFieldNumber;
const int Device::kNativeVectorWidthShortFieldNumber;
const int Device::kNativeVectorWidthIntegerFieldNumber;
const int Device::kNativeVectorWidthLongFieldNumber;
const int Device::kNativeVectorWidthFloatFieldNumber;
const int Device::kNativeVectorWidthDoubleFieldNumber;
const int Device::kNativeVectorWidthHalfFieldNumber;
const int Device::kAddressBitsFieldNumber;
const int Device::kMaximumMemoryAllocationSizeFieldNumber;
const int Device::kImageSupportFieldNumber;
const int Device::kMaximumReadImageArgumentsFieldNumber;
const int Device::kMaximumWriteImageArgumentsFieldNumber;
const int Device::kImage2DMaximumWidthFieldNumber;
const int Device::kImage2DMaximumHeightFieldNumber;
const int Device::kImage3DMaximumWidthFieldNumber;
const int Device::kImage3DMaximumHeightFieldNumber;
const int Device::kImage3DMaximumDepthFieldNumber;
const int Device::kMaximumSamplersFieldNumber;
const int Device::kMaximumParameterSizeFieldNumber;
const int Device::kMemoryBaseAddressAlignmentFieldNumber;
const int Device::kMinimumDataTypeAlignmentSizeFieldNumber;
const int Device::kSingleFloatingPointConfigurationFieldNumber;
const int Device::kGlobalMemoryCacheTypeFieldNumber;
const int Device::kGlobalMemoryCachelineSizeFieldNumber;
const int Device::kGlobalMemoryCacheSizeFieldNumber;
const int Device::kGlobalMemorySizeFieldNumber;
const int Device::kMaximumConstantBufferSizeFieldNumber;
const int Device::kMaximumConstantArgumentsFieldNumber;
const int Device::kLocalMemoryTypeFieldNumber;
const int Device::kLocalMemorySizeFieldNumber;
const int Device::kErrorCorrectionSupportFieldNumber;
const int Device::kHostUnifiedMemoryFieldNumber;
const int Device::kProfilingTimerResolutionFieldNumber;
const int Device::kEndianLittleFieldNumber;
const int Device::kAvailableFieldNumber;
const int Device::kCompilerAvailableFieldNumber;
const int Device::kExecutionCapabilitiesFieldNumber;
const int Device::kQueuePropertiesFieldNumber;
const int Device::kNameFieldNumber;
const int Device::kVendorFieldNumber;
const int Device::kDriverVersionFieldNumber;
const int Device::kProfileFieldNumber;
const int Device::kVersionFieldNumber;
const int Device::kOpenclCVersionFieldNumber;
const int Device::kExtensionsFieldNumber;
#endif  // !_MSC_VER

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sacred.proto.Device)
}

void Device::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Device::Device(const Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sacred.proto.Device)
}

void Device::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  vendor_identifier_ = 0u;
  maximum_compute_units_ = 0u;
  maximum_work_item_dimensions_ = 0u;
  maximum_work_group_size_ = GOOGLE_ULONGLONG(0);
  preferred_vector_width_character_ = 0u;
  preferred_vector_width_short_ = 0u;
  preferred_vector_width_integer_ = 0u;
  preferred_vector_width_long_ = 0u;
  preferred_vector_width_float_ = 0u;
  preferred_vector_width_double_ = 0u;
  preferred_vector_width_half_ = 0u;
  native_vector_width_character_ = 0u;
  native_vector_width_short_ = 0u;
  native_vector_width_integer_ = 0u;
  native_vector_width_long_ = 0u;
  native_vector_width_float_ = 0u;
  native_vector_width_double_ = 0u;
  native_vector_width_half_ = 0u;
  address_bits_ = 0u;
  maximum_memory_allocation_size_ = GOOGLE_ULONGLONG(0);
  image_support_ = false;
  maximum_read_image_arguments_ = 0u;
  maximum_write_image_arguments_ = 0u;
  image2d_maximum_width_ = GOOGLE_ULONGLONG(0);
  image2d_maximum_height_ = GOOGLE_ULONGLONG(0);
  image3d_maximum_width_ = GOOGLE_ULONGLONG(0);
  image3d_maximum_height_ = GOOGLE_ULONGLONG(0);
  image3d_maximum_depth_ = GOOGLE_ULONGLONG(0);
  maximum_samplers_ = 0u;
  maximum_parameter_size_ = GOOGLE_ULONGLONG(0);
  memory_base_address_alignment_ = 0u;
  minimum_data_type_alignment_size_ = 0u;
  global_memory_cache_type_ = 0;
  global_memory_cacheline_size_ = 0u;
  global_memory_cache_size_ = GOOGLE_ULONGLONG(0);
  global_memory_size_ = GOOGLE_ULONGLONG(0);
  maximum_constant_buffer_size_ = GOOGLE_ULONGLONG(0);
  maximum_constant_arguments_ = 0u;
  local_memory_type_ = 0;
  local_memory_size_ = GOOGLE_ULONGLONG(0);
  error_correction_support_ = false;
  host_unified_memory_ = false;
  profiling_timer_resolution_ = GOOGLE_ULONGLONG(0);
  endian_little_ = false;
  available_ = false;
  compiler_available_ = false;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opencl_c_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extensions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:sacred.proto.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opencl_c_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extensions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Device*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, maximum_work_item_dimensions_);
  ZR_(maximum_work_group_size_, preferred_vector_width_short_);
  ZR_(preferred_vector_width_integer_, native_vector_width_integer_);
  ZR_(native_vector_width_long_, maximum_read_image_arguments_);
  image_support_ = false;
  ZR_(image2d_maximum_width_, maximum_parameter_size_);
  ZR_(memory_base_address_alignment_, minimum_data_type_alignment_size_);
  ZR_(global_memory_cache_type_, maximum_constant_buffer_size_);
  ZR_(error_correction_support_, available_);
  compiler_available_ = false;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opencl_c_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  maximum_work_item_sizes_.Clear();
  single_floating_point_configuration_.Clear();
  execution_capabilities_.Clear();
  queue_properties_.Clear();
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sacred.proto.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sacred.proto.Device.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sacred::proto::Device_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vendor_identifier;
        break;
      }

      // optional uint32 vendor_identifier = 2;
      case 2: {
        if (tag == 16) {
         parse_vendor_identifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_identifier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maximum_compute_units;
        break;
      }

      // optional uint32 maximum_compute_units = 3;
      case 3: {
        if (tag == 24) {
         parse_maximum_compute_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_compute_units_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maximum_work_item_dimensions;
        break;
      }

      // optional uint32 maximum_work_item_dimensions = 4;
      case 4: {
        if (tag == 32) {
         parse_maximum_work_item_dimensions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_work_item_dimensions_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_maximum_work_item_sizes;
        break;
      }

      // repeated uint64 maximum_work_item_sizes = 5;
      case 5: {
        if (tag == 42) {
         parse_maximum_work_item_sizes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_maximum_work_item_sizes())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42, input, this->mutable_maximum_work_item_sizes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maximum_work_group_size;
        break;
      }

      // optional uint64 maximum_work_group_size = 6;
      case 6: {
        if (tag == 48) {
         parse_maximum_work_group_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maximum_work_group_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_preferred_vector_width_character;
        break;
      }

      // optional uint32 preferred_vector_width_character = 7;
      case 7: {
        if (tag == 56) {
         parse_preferred_vector_width_character:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_vector_width_character_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_preferred_vector_width_short;
        break;
      }

      // optional uint32 preferred_vector_width_short = 8;
      case 8: {
        if (tag == 64) {
         parse_preferred_vector_width_short:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_vector_width_short_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_preferred_vector_width_integer;
        break;
      }

      // optional uint32 preferred_vector_width_integer = 9;
      case 9: {
        if (tag == 72) {
         parse_preferred_vector_width_integer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_vector_width_integer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_preferred_vector_width_long;
        break;
      }

      // optional uint32 preferred_vector_width_long = 10;
      case 10: {
        if (tag == 80) {
         parse_preferred_vector_width_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_vector_width_long_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_preferred_vector_width_float;
        break;
      }

      // optional uint32 preferred_vector_width_float = 11;
      case 11: {
        if (tag == 88) {
         parse_preferred_vector_width_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_vector_width_float_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_preferred_vector_width_double;
        break;
      }

      // optional uint32 preferred_vector_width_double = 12;
      case 12: {
        if (tag == 96) {
         parse_preferred_vector_width_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_vector_width_double_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_preferred_vector_width_half;
        break;
      }

      // optional uint32 preferred_vector_width_half = 13;
      case 13: {
        if (tag == 104) {
         parse_preferred_vector_width_half:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_vector_width_half_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_native_vector_width_character;
        break;
      }

      // optional uint32 native_vector_width_character = 14;
      case 14: {
        if (tag == 112) {
         parse_native_vector_width_character:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &native_vector_width_character_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_native_vector_width_short;
        break;
      }

      // optional uint32 native_vector_width_short = 15;
      case 15: {
        if (tag == 120) {
         parse_native_vector_width_short:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &native_vector_width_short_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_native_vector_width_integer;
        break;
      }

      // optional uint32 native_vector_width_integer = 16;
      case 16: {
        if (tag == 128) {
         parse_native_vector_width_integer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &native_vector_width_integer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_native_vector_width_long;
        break;
      }

      // optional uint32 native_vector_width_long = 17;
      case 17: {
        if (tag == 136) {
         parse_native_vector_width_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &native_vector_width_long_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_native_vector_width_float;
        break;
      }

      // optional uint32 native_vector_width_float = 18;
      case 18: {
        if (tag == 144) {
         parse_native_vector_width_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &native_vector_width_float_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_native_vector_width_double;
        break;
      }

      // optional uint32 native_vector_width_double = 19;
      case 19: {
        if (tag == 152) {
         parse_native_vector_width_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &native_vector_width_double_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_native_vector_width_half;
        break;
      }

      // optional uint32 native_vector_width_half = 20;
      case 20: {
        if (tag == 160) {
         parse_native_vector_width_half:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &native_vector_width_half_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_address_bits;
        break;
      }

      // optional uint32 address_bits = 21;
      case 21: {
        if (tag == 168) {
         parse_address_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_maximum_memory_allocation_size;
        break;
      }

      // optional uint64 maximum_memory_allocation_size = 22;
      case 22: {
        if (tag == 176) {
         parse_maximum_memory_allocation_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maximum_memory_allocation_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_image_support;
        break;
      }

      // optional bool image_support = 23;
      case 23: {
        if (tag == 184) {
         parse_image_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &image_support_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_maximum_read_image_arguments;
        break;
      }

      // optional uint32 maximum_read_image_arguments = 24;
      case 24: {
        if (tag == 192) {
         parse_maximum_read_image_arguments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_read_image_arguments_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_maximum_write_image_arguments;
        break;
      }

      // optional uint32 maximum_write_image_arguments = 25;
      case 25: {
        if (tag == 200) {
         parse_maximum_write_image_arguments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_write_image_arguments_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_image2d_maximum_width;
        break;
      }

      // optional uint64 image2d_maximum_width = 26;
      case 26: {
        if (tag == 208) {
         parse_image2d_maximum_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &image2d_maximum_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_image2d_maximum_height;
        break;
      }

      // optional uint64 image2d_maximum_height = 27;
      case 27: {
        if (tag == 216) {
         parse_image2d_maximum_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &image2d_maximum_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_image3d_maximum_width;
        break;
      }

      // optional uint64 image3d_maximum_width = 28;
      case 28: {
        if (tag == 224) {
         parse_image3d_maximum_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &image3d_maximum_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_image3d_maximum_height;
        break;
      }

      // optional uint64 image3d_maximum_height = 29;
      case 29: {
        if (tag == 232) {
         parse_image3d_maximum_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &image3d_maximum_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_image3d_maximum_depth;
        break;
      }

      // optional uint64 image3d_maximum_depth = 30;
      case 30: {
        if (tag == 240) {
         parse_image3d_maximum_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &image3d_maximum_depth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_maximum_samplers;
        break;
      }

      // optional uint32 maximum_samplers = 31;
      case 31: {
        if (tag == 248) {
         parse_maximum_samplers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_samplers_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_maximum_parameter_size;
        break;
      }

      // optional uint64 maximum_parameter_size = 32;
      case 32: {
        if (tag == 256) {
         parse_maximum_parameter_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maximum_parameter_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_memory_base_address_alignment;
        break;
      }

      // optional uint32 memory_base_address_alignment = 33;
      case 33: {
        if (tag == 264) {
         parse_memory_base_address_alignment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_base_address_alignment_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_minimum_data_type_alignment_size;
        break;
      }

      // optional uint32 minimum_data_type_alignment_size = 34;
      case 34: {
        if (tag == 272) {
         parse_minimum_data_type_alignment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimum_data_type_alignment_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_single_floating_point_configuration;
        break;
      }

      // repeated .sacred.proto.Device.FloatingPointConfiguration single_floating_point_configuration = 35;
      case 35: {
        if (tag == 282) {
         parse_single_floating_point_configuration:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_single_floating_point_configuration(static_cast< ::sacred::proto::Device_FloatingPointConfiguration >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 280) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_single_floating_point_configuration(static_cast< ::sacred::proto::Device_FloatingPointConfiguration >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_global_memory_cache_type;
        break;
      }

      // optional .sacred.proto.Device.MemoryCacheType global_memory_cache_type = 36;
      case 36: {
        if (tag == 288) {
         parse_global_memory_cache_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_global_memory_cache_type(static_cast< ::sacred::proto::Device_MemoryCacheType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_global_memory_cacheline_size;
        break;
      }

      // optional uint32 global_memory_cacheline_size = 37;
      case 37: {
        if (tag == 296) {
         parse_global_memory_cacheline_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &global_memory_cacheline_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_global_memory_cache_size;
        break;
      }

      // optional uint64 global_memory_cache_size = 38;
      case 38: {
        if (tag == 304) {
         parse_global_memory_cache_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &global_memory_cache_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_global_memory_size;
        break;
      }

      // optional uint64 global_memory_size = 39;
      case 39: {
        if (tag == 312) {
         parse_global_memory_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &global_memory_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_maximum_constant_buffer_size;
        break;
      }

      // optional uint64 maximum_constant_buffer_size = 40;
      case 40: {
        if (tag == 320) {
         parse_maximum_constant_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maximum_constant_buffer_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_maximum_constant_arguments;
        break;
      }

      // optional uint32 maximum_constant_arguments = 41;
      case 41: {
        if (tag == 328) {
         parse_maximum_constant_arguments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_constant_arguments_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_local_memory_type;
        break;
      }

      // optional .sacred.proto.Device.LocalMemoryType local_memory_type = 42;
      case 42: {
        if (tag == 336) {
         parse_local_memory_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_local_memory_type(static_cast< ::sacred::proto::Device_LocalMemoryType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_local_memory_size;
        break;
      }

      // optional uint64 local_memory_size = 43;
      case 43: {
        if (tag == 344) {
         parse_local_memory_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_memory_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_error_correction_support;
        break;
      }

      // optional bool error_correction_support = 44;
      case 44: {
        if (tag == 352) {
         parse_error_correction_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_correction_support_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_host_unified_memory;
        break;
      }

      // optional bool host_unified_memory = 45;
      case 45: {
        if (tag == 360) {
         parse_host_unified_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &host_unified_memory_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_profiling_timer_resolution;
        break;
      }

      // optional uint64 profiling_timer_resolution = 46;
      case 46: {
        if (tag == 368) {
         parse_profiling_timer_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &profiling_timer_resolution_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_endian_little;
        break;
      }

      // optional bool endian_little = 47;
      case 47: {
        if (tag == 376) {
         parse_endian_little:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endian_little_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_available;
        break;
      }

      // optional bool available = 48;
      case 48: {
        if (tag == 384) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_compiler_available;
        break;
      }

      // optional bool compiler_available = 49;
      case 49: {
        if (tag == 392) {
         parse_compiler_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compiler_available_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_execution_capabilities;
        break;
      }

      // repeated .sacred.proto.Device.ExecutionCapability execution_capabilities = 50;
      case 50: {
        if (tag == 402) {
         parse_execution_capabilities:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_execution_capabilities(static_cast< ::sacred::proto::Device_ExecutionCapability >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 400) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_execution_capabilities(static_cast< ::sacred::proto::Device_ExecutionCapability >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_queue_properties;
        break;
      }

      // repeated .sacred.proto.Device.QueueProperty queue_properties = 51;
      case 51: {
        if (tag == 410) {
         parse_queue_properties:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_queue_properties(static_cast< ::sacred::proto::Device_QueueProperty >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 408) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_queue_properties(static_cast< ::sacred::proto::Device_QueueProperty >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_name;
        break;
      }

      // optional string name = 52;
      case 52: {
        if (tag == 418) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Device.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_vendor;
        break;
      }

      // optional string vendor = 53;
      case 53: {
        if (tag == 426) {
         parse_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Device.vendor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_driver_version;
        break;
      }

      // optional string driver_version = 54;
      case 54: {
        if (tag == 434) {
         parse_driver_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->driver_version().data(), this->driver_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Device.driver_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_profile;
        break;
      }

      // optional string profile = 55;
      case 55: {
        if (tag == 442) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->profile().data(), this->profile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Device.profile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_version;
        break;
      }

      // optional string version = 56;
      case 56: {
        if (tag == 450) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Device.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_opencl_c_version;
        break;
      }

      // optional string opencl_c_version = 57;
      case 57: {
        if (tag == 458) {
         parse_opencl_c_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opencl_c_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opencl_c_version().data(), this->opencl_c_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Device.opencl_c_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_extensions;
        break;
      }

      // optional string extensions = 58;
      case 58: {
        if (tag == 466) {
         parse_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extensions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extensions().data(), this->extensions().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sacred.proto.Device.extensions"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sacred.proto.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sacred.proto.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sacred.proto.Device)
  // optional .sacred.proto.Device.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 vendor_identifier = 2;
  if (this->vendor_identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vendor_identifier(), output);
  }

  // optional uint32 maximum_compute_units = 3;
  if (this->maximum_compute_units() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maximum_compute_units(), output);
  }

  // optional uint32 maximum_work_item_dimensions = 4;
  if (this->maximum_work_item_dimensions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maximum_work_item_dimensions(), output);
  }

  // repeated uint64 maximum_work_item_sizes = 5;
  if (this->maximum_work_item_sizes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_maximum_work_item_sizes_cached_byte_size_);
  }
  for (int i = 0; i < this->maximum_work_item_sizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->maximum_work_item_sizes(i), output);
  }

  // optional uint64 maximum_work_group_size = 6;
  if (this->maximum_work_group_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->maximum_work_group_size(), output);
  }

  // optional uint32 preferred_vector_width_character = 7;
  if (this->preferred_vector_width_character() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->preferred_vector_width_character(), output);
  }

  // optional uint32 preferred_vector_width_short = 8;
  if (this->preferred_vector_width_short() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preferred_vector_width_short(), output);
  }

  // optional uint32 preferred_vector_width_integer = 9;
  if (this->preferred_vector_width_integer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->preferred_vector_width_integer(), output);
  }

  // optional uint32 preferred_vector_width_long = 10;
  if (this->preferred_vector_width_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->preferred_vector_width_long(), output);
  }

  // optional uint32 preferred_vector_width_float = 11;
  if (this->preferred_vector_width_float() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->preferred_vector_width_float(), output);
  }

  // optional uint32 preferred_vector_width_double = 12;
  if (this->preferred_vector_width_double() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->preferred_vector_width_double(), output);
  }

  // optional uint32 preferred_vector_width_half = 13;
  if (this->preferred_vector_width_half() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->preferred_vector_width_half(), output);
  }

  // optional uint32 native_vector_width_character = 14;
  if (this->native_vector_width_character() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->native_vector_width_character(), output);
  }

  // optional uint32 native_vector_width_short = 15;
  if (this->native_vector_width_short() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->native_vector_width_short(), output);
  }

  // optional uint32 native_vector_width_integer = 16;
  if (this->native_vector_width_integer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->native_vector_width_integer(), output);
  }

  // optional uint32 native_vector_width_long = 17;
  if (this->native_vector_width_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->native_vector_width_long(), output);
  }

  // optional uint32 native_vector_width_float = 18;
  if (this->native_vector_width_float() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->native_vector_width_float(), output);
  }

  // optional uint32 native_vector_width_double = 19;
  if (this->native_vector_width_double() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->native_vector_width_double(), output);
  }

  // optional uint32 native_vector_width_half = 20;
  if (this->native_vector_width_half() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->native_vector_width_half(), output);
  }

  // optional uint32 address_bits = 21;
  if (this->address_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->address_bits(), output);
  }

  // optional uint64 maximum_memory_allocation_size = 22;
  if (this->maximum_memory_allocation_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->maximum_memory_allocation_size(), output);
  }

  // optional bool image_support = 23;
  if (this->image_support() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->image_support(), output);
  }

  // optional uint32 maximum_read_image_arguments = 24;
  if (this->maximum_read_image_arguments() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->maximum_read_image_arguments(), output);
  }

  // optional uint32 maximum_write_image_arguments = 25;
  if (this->maximum_write_image_arguments() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->maximum_write_image_arguments(), output);
  }

  // optional uint64 image2d_maximum_width = 26;
  if (this->image2d_maximum_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->image2d_maximum_width(), output);
  }

  // optional uint64 image2d_maximum_height = 27;
  if (this->image2d_maximum_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->image2d_maximum_height(), output);
  }

  // optional uint64 image3d_maximum_width = 28;
  if (this->image3d_maximum_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->image3d_maximum_width(), output);
  }

  // optional uint64 image3d_maximum_height = 29;
  if (this->image3d_maximum_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->image3d_maximum_height(), output);
  }

  // optional uint64 image3d_maximum_depth = 30;
  if (this->image3d_maximum_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->image3d_maximum_depth(), output);
  }

  // optional uint32 maximum_samplers = 31;
  if (this->maximum_samplers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->maximum_samplers(), output);
  }

  // optional uint64 maximum_parameter_size = 32;
  if (this->maximum_parameter_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->maximum_parameter_size(), output);
  }

  // optional uint32 memory_base_address_alignment = 33;
  if (this->memory_base_address_alignment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->memory_base_address_alignment(), output);
  }

  // optional uint32 minimum_data_type_alignment_size = 34;
  if (this->minimum_data_type_alignment_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->minimum_data_type_alignment_size(), output);
  }

  // repeated .sacred.proto.Device.FloatingPointConfiguration single_floating_point_configuration = 35;
  if (this->single_floating_point_configuration_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      35,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_single_floating_point_configuration_cached_byte_size_);
  }
  for (int i = 0; i < this->single_floating_point_configuration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->single_floating_point_configuration(i), output);
  }

  // optional .sacred.proto.Device.MemoryCacheType global_memory_cache_type = 36;
  if (this->global_memory_cache_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->global_memory_cache_type(), output);
  }

  // optional uint32 global_memory_cacheline_size = 37;
  if (this->global_memory_cacheline_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->global_memory_cacheline_size(), output);
  }

  // optional uint64 global_memory_cache_size = 38;
  if (this->global_memory_cache_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->global_memory_cache_size(), output);
  }

  // optional uint64 global_memory_size = 39;
  if (this->global_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(39, this->global_memory_size(), output);
  }

  // optional uint64 maximum_constant_buffer_size = 40;
  if (this->maximum_constant_buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->maximum_constant_buffer_size(), output);
  }

  // optional uint32 maximum_constant_arguments = 41;
  if (this->maximum_constant_arguments() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->maximum_constant_arguments(), output);
  }

  // optional .sacred.proto.Device.LocalMemoryType local_memory_type = 42;
  if (this->local_memory_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->local_memory_type(), output);
  }

  // optional uint64 local_memory_size = 43;
  if (this->local_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(43, this->local_memory_size(), output);
  }

  // optional bool error_correction_support = 44;
  if (this->error_correction_support() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->error_correction_support(), output);
  }

  // optional bool host_unified_memory = 45;
  if (this->host_unified_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->host_unified_memory(), output);
  }

  // optional uint64 profiling_timer_resolution = 46;
  if (this->profiling_timer_resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(46, this->profiling_timer_resolution(), output);
  }

  // optional bool endian_little = 47;
  if (this->endian_little() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->endian_little(), output);
  }

  // optional bool available = 48;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->available(), output);
  }

  // optional bool compiler_available = 49;
  if (this->compiler_available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->compiler_available(), output);
  }

  // repeated .sacred.proto.Device.ExecutionCapability execution_capabilities = 50;
  if (this->execution_capabilities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      50,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_execution_capabilities_cached_byte_size_);
  }
  for (int i = 0; i < this->execution_capabilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->execution_capabilities(i), output);
  }

  // repeated .sacred.proto.Device.QueueProperty queue_properties = 51;
  if (this->queue_properties_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      51,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_queue_properties_cached_byte_size_);
  }
  for (int i = 0; i < this->queue_properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->queue_properties(i), output);
  }

  // optional string name = 52;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->name(), output);
  }

  // optional string vendor = 53;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      53, this->vendor(), output);
  }

  // optional string driver_version = 54;
  if (this->driver_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driver_version().data(), this->driver_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.driver_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->driver_version(), output);
  }

  // optional string profile = 55;
  if (this->profile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.profile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->profile(), output);
  }

  // optional string version = 56;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      56, this->version(), output);
  }

  // optional string opencl_c_version = 57;
  if (this->opencl_c_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opencl_c_version().data(), this->opencl_c_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.opencl_c_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      57, this->opencl_c_version(), output);
  }

  // optional string extensions = 58;
  if (this->extensions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extensions().data(), this->extensions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.extensions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      58, this->extensions(), output);
  }

  // @@protoc_insertion_point(serialize_end:sacred.proto.Device)
}

::google::protobuf::uint8* Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sacred.proto.Device)
  // optional .sacred.proto.Device.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 vendor_identifier = 2;
  if (this->vendor_identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vendor_identifier(), target);
  }

  // optional uint32 maximum_compute_units = 3;
  if (this->maximum_compute_units() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maximum_compute_units(), target);
  }

  // optional uint32 maximum_work_item_dimensions = 4;
  if (this->maximum_work_item_dimensions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maximum_work_item_dimensions(), target);
  }

  // repeated uint64 maximum_work_item_sizes = 5;
  if (this->maximum_work_item_sizes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _maximum_work_item_sizes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->maximum_work_item_sizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->maximum_work_item_sizes(i), target);
  }

  // optional uint64 maximum_work_group_size = 6;
  if (this->maximum_work_group_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->maximum_work_group_size(), target);
  }

  // optional uint32 preferred_vector_width_character = 7;
  if (this->preferred_vector_width_character() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->preferred_vector_width_character(), target);
  }

  // optional uint32 preferred_vector_width_short = 8;
  if (this->preferred_vector_width_short() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->preferred_vector_width_short(), target);
  }

  // optional uint32 preferred_vector_width_integer = 9;
  if (this->preferred_vector_width_integer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->preferred_vector_width_integer(), target);
  }

  // optional uint32 preferred_vector_width_long = 10;
  if (this->preferred_vector_width_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->preferred_vector_width_long(), target);
  }

  // optional uint32 preferred_vector_width_float = 11;
  if (this->preferred_vector_width_float() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->preferred_vector_width_float(), target);
  }

  // optional uint32 preferred_vector_width_double = 12;
  if (this->preferred_vector_width_double() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->preferred_vector_width_double(), target);
  }

  // optional uint32 preferred_vector_width_half = 13;
  if (this->preferred_vector_width_half() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->preferred_vector_width_half(), target);
  }

  // optional uint32 native_vector_width_character = 14;
  if (this->native_vector_width_character() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->native_vector_width_character(), target);
  }

  // optional uint32 native_vector_width_short = 15;
  if (this->native_vector_width_short() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->native_vector_width_short(), target);
  }

  // optional uint32 native_vector_width_integer = 16;
  if (this->native_vector_width_integer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->native_vector_width_integer(), target);
  }

  // optional uint32 native_vector_width_long = 17;
  if (this->native_vector_width_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->native_vector_width_long(), target);
  }

  // optional uint32 native_vector_width_float = 18;
  if (this->native_vector_width_float() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->native_vector_width_float(), target);
  }

  // optional uint32 native_vector_width_double = 19;
  if (this->native_vector_width_double() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->native_vector_width_double(), target);
  }

  // optional uint32 native_vector_width_half = 20;
  if (this->native_vector_width_half() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->native_vector_width_half(), target);
  }

  // optional uint32 address_bits = 21;
  if (this->address_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->address_bits(), target);
  }

  // optional uint64 maximum_memory_allocation_size = 22;
  if (this->maximum_memory_allocation_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->maximum_memory_allocation_size(), target);
  }

  // optional bool image_support = 23;
  if (this->image_support() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->image_support(), target);
  }

  // optional uint32 maximum_read_image_arguments = 24;
  if (this->maximum_read_image_arguments() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->maximum_read_image_arguments(), target);
  }

  // optional uint32 maximum_write_image_arguments = 25;
  if (this->maximum_write_image_arguments() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->maximum_write_image_arguments(), target);
  }

  // optional uint64 image2d_maximum_width = 26;
  if (this->image2d_maximum_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->image2d_maximum_width(), target);
  }

  // optional uint64 image2d_maximum_height = 27;
  if (this->image2d_maximum_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->image2d_maximum_height(), target);
  }

  // optional uint64 image3d_maximum_width = 28;
  if (this->image3d_maximum_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->image3d_maximum_width(), target);
  }

  // optional uint64 image3d_maximum_height = 29;
  if (this->image3d_maximum_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->image3d_maximum_height(), target);
  }

  // optional uint64 image3d_maximum_depth = 30;
  if (this->image3d_maximum_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->image3d_maximum_depth(), target);
  }

  // optional uint32 maximum_samplers = 31;
  if (this->maximum_samplers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->maximum_samplers(), target);
  }

  // optional uint64 maximum_parameter_size = 32;
  if (this->maximum_parameter_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->maximum_parameter_size(), target);
  }

  // optional uint32 memory_base_address_alignment = 33;
  if (this->memory_base_address_alignment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->memory_base_address_alignment(), target);
  }

  // optional uint32 minimum_data_type_alignment_size = 34;
  if (this->minimum_data_type_alignment_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->minimum_data_type_alignment_size(), target);
  }

  // repeated .sacred.proto.Device.FloatingPointConfiguration single_floating_point_configuration = 35;
  if (this->single_floating_point_configuration_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      35,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _single_floating_point_configuration_cached_byte_size_, target);
  }
  for (int i = 0; i < this->single_floating_point_configuration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->single_floating_point_configuration(i), target);
  }

  // optional .sacred.proto.Device.MemoryCacheType global_memory_cache_type = 36;
  if (this->global_memory_cache_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->global_memory_cache_type(), target);
  }

  // optional uint32 global_memory_cacheline_size = 37;
  if (this->global_memory_cacheline_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->global_memory_cacheline_size(), target);
  }

  // optional uint64 global_memory_cache_size = 38;
  if (this->global_memory_cache_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->global_memory_cache_size(), target);
  }

  // optional uint64 global_memory_size = 39;
  if (this->global_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(39, this->global_memory_size(), target);
  }

  // optional uint64 maximum_constant_buffer_size = 40;
  if (this->maximum_constant_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->maximum_constant_buffer_size(), target);
  }

  // optional uint32 maximum_constant_arguments = 41;
  if (this->maximum_constant_arguments() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->maximum_constant_arguments(), target);
  }

  // optional .sacred.proto.Device.LocalMemoryType local_memory_type = 42;
  if (this->local_memory_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->local_memory_type(), target);
  }

  // optional uint64 local_memory_size = 43;
  if (this->local_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(43, this->local_memory_size(), target);
  }

  // optional bool error_correction_support = 44;
  if (this->error_correction_support() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->error_correction_support(), target);
  }

  // optional bool host_unified_memory = 45;
  if (this->host_unified_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->host_unified_memory(), target);
  }

  // optional uint64 profiling_timer_resolution = 46;
  if (this->profiling_timer_resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(46, this->profiling_timer_resolution(), target);
  }

  // optional bool endian_little = 47;
  if (this->endian_little() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->endian_little(), target);
  }

  // optional bool available = 48;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->available(), target);
  }

  // optional bool compiler_available = 49;
  if (this->compiler_available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->compiler_available(), target);
  }

  // repeated .sacred.proto.Device.ExecutionCapability execution_capabilities = 50;
  if (this->execution_capabilities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      50,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _execution_capabilities_cached_byte_size_, target);
  }
  for (int i = 0; i < this->execution_capabilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->execution_capabilities(i), target);
  }

  // repeated .sacred.proto.Device.QueueProperty queue_properties = 51;
  if (this->queue_properties_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      51,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _queue_properties_cached_byte_size_, target);
  }
  for (int i = 0; i < this->queue_properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->queue_properties(i), target);
  }

  // optional string name = 52;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->name(), target);
  }

  // optional string vendor = 53;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->vendor(), target);
  }

  // optional string driver_version = 54;
  if (this->driver_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driver_version().data(), this->driver_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.driver_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->driver_version(), target);
  }

  // optional string profile = 55;
  if (this->profile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.profile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->profile(), target);
  }

  // optional string version = 56;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        56, this->version(), target);
  }

  // optional string opencl_c_version = 57;
  if (this->opencl_c_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opencl_c_version().data(), this->opencl_c_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.opencl_c_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        57, this->opencl_c_version(), target);
  }

  // optional string extensions = 58;
  if (this->extensions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extensions().data(), this->extensions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sacred.proto.Device.extensions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        58, this->extensions(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sacred.proto.Device)
  return target;
}

int Device::ByteSize() const {
  int total_size = 0;

  // optional .sacred.proto.Device.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 vendor_identifier = 2;
  if (this->vendor_identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vendor_identifier());
  }

  // optional uint32 maximum_compute_units = 3;
  if (this->maximum_compute_units() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_compute_units());
  }

  // optional uint32 maximum_work_item_dimensions = 4;
  if (this->maximum_work_item_dimensions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_work_item_dimensions());
  }

  // optional uint64 maximum_work_group_size = 6;
  if (this->maximum_work_group_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maximum_work_group_size());
  }

  // optional uint32 preferred_vector_width_character = 7;
  if (this->preferred_vector_width_character() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preferred_vector_width_character());
  }

  // optional uint32 preferred_vector_width_short = 8;
  if (this->preferred_vector_width_short() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preferred_vector_width_short());
  }

  // optional uint32 preferred_vector_width_integer = 9;
  if (this->preferred_vector_width_integer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preferred_vector_width_integer());
  }

  // optional uint32 preferred_vector_width_long = 10;
  if (this->preferred_vector_width_long() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preferred_vector_width_long());
  }

  // optional uint32 preferred_vector_width_float = 11;
  if (this->preferred_vector_width_float() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preferred_vector_width_float());
  }

  // optional uint32 preferred_vector_width_double = 12;
  if (this->preferred_vector_width_double() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preferred_vector_width_double());
  }

  // optional uint32 preferred_vector_width_half = 13;
  if (this->preferred_vector_width_half() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preferred_vector_width_half());
  }

  // optional uint32 native_vector_width_character = 14;
  if (this->native_vector_width_character() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->native_vector_width_character());
  }

  // optional uint32 native_vector_width_short = 15;
  if (this->native_vector_width_short() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->native_vector_width_short());
  }

  // optional uint32 native_vector_width_integer = 16;
  if (this->native_vector_width_integer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->native_vector_width_integer());
  }

  // optional uint32 native_vector_width_long = 17;
  if (this->native_vector_width_long() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->native_vector_width_long());
  }

  // optional uint32 native_vector_width_float = 18;
  if (this->native_vector_width_float() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->native_vector_width_float());
  }

  // optional uint32 native_vector_width_double = 19;
  if (this->native_vector_width_double() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->native_vector_width_double());
  }

  // optional uint32 native_vector_width_half = 20;
  if (this->native_vector_width_half() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->native_vector_width_half());
  }

  // optional uint32 address_bits = 21;
  if (this->address_bits() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address_bits());
  }

  // optional uint64 maximum_memory_allocation_size = 22;
  if (this->maximum_memory_allocation_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maximum_memory_allocation_size());
  }

  // optional bool image_support = 23;
  if (this->image_support() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 maximum_read_image_arguments = 24;
  if (this->maximum_read_image_arguments() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_read_image_arguments());
  }

  // optional uint32 maximum_write_image_arguments = 25;
  if (this->maximum_write_image_arguments() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_write_image_arguments());
  }

  // optional uint64 image2d_maximum_width = 26;
  if (this->image2d_maximum_width() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->image2d_maximum_width());
  }

  // optional uint64 image2d_maximum_height = 27;
  if (this->image2d_maximum_height() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->image2d_maximum_height());
  }

  // optional uint64 image3d_maximum_width = 28;
  if (this->image3d_maximum_width() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->image3d_maximum_width());
  }

  // optional uint64 image3d_maximum_height = 29;
  if (this->image3d_maximum_height() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->image3d_maximum_height());
  }

  // optional uint64 image3d_maximum_depth = 30;
  if (this->image3d_maximum_depth() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->image3d_maximum_depth());
  }

  // optional uint32 maximum_samplers = 31;
  if (this->maximum_samplers() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_samplers());
  }

  // optional uint64 maximum_parameter_size = 32;
  if (this->maximum_parameter_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maximum_parameter_size());
  }

  // optional uint32 memory_base_address_alignment = 33;
  if (this->memory_base_address_alignment() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->memory_base_address_alignment());
  }

  // optional uint32 minimum_data_type_alignment_size = 34;
  if (this->minimum_data_type_alignment_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minimum_data_type_alignment_size());
  }

  // optional .sacred.proto.Device.MemoryCacheType global_memory_cache_type = 36;
  if (this->global_memory_cache_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->global_memory_cache_type());
  }

  // optional uint32 global_memory_cacheline_size = 37;
  if (this->global_memory_cacheline_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->global_memory_cacheline_size());
  }

  // optional uint64 global_memory_cache_size = 38;
  if (this->global_memory_cache_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->global_memory_cache_size());
  }

  // optional uint64 global_memory_size = 39;
  if (this->global_memory_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->global_memory_size());
  }

  // optional uint64 maximum_constant_buffer_size = 40;
  if (this->maximum_constant_buffer_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maximum_constant_buffer_size());
  }

  // optional uint32 maximum_constant_arguments = 41;
  if (this->maximum_constant_arguments() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_constant_arguments());
  }

  // optional .sacred.proto.Device.LocalMemoryType local_memory_type = 42;
  if (this->local_memory_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_memory_type());
  }

  // optional uint64 local_memory_size = 43;
  if (this->local_memory_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->local_memory_size());
  }

  // optional bool error_correction_support = 44;
  if (this->error_correction_support() != 0) {
    total_size += 2 + 1;
  }

  // optional bool host_unified_memory = 45;
  if (this->host_unified_memory() != 0) {
    total_size += 2 + 1;
  }

  // optional uint64 profiling_timer_resolution = 46;
  if (this->profiling_timer_resolution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->profiling_timer_resolution());
  }

  // optional bool endian_little = 47;
  if (this->endian_little() != 0) {
    total_size += 2 + 1;
  }

  // optional bool available = 48;
  if (this->available() != 0) {
    total_size += 2 + 1;
  }

  // optional bool compiler_available = 49;
  if (this->compiler_available() != 0) {
    total_size += 2 + 1;
  }

  // optional string name = 52;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string vendor = 53;
  if (this->vendor().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor());
  }

  // optional string driver_version = 54;
  if (this->driver_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driver_version());
  }

  // optional string profile = 55;
  if (this->profile().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profile());
  }

  // optional string version = 56;
  if (this->version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional string opencl_c_version = 57;
  if (this->opencl_c_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opencl_c_version());
  }

  // optional string extensions = 58;
  if (this->extensions().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extensions());
  }

  // repeated uint64 maximum_work_item_sizes = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->maximum_work_item_sizes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->maximum_work_item_sizes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _maximum_work_item_sizes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .sacred.proto.Device.FloatingPointConfiguration single_floating_point_configuration = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->single_floating_point_configuration_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->single_floating_point_configuration(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _single_floating_point_configuration_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .sacred.proto.Device.ExecutionCapability execution_capabilities = 50;
  {
    int data_size = 0;
    for (int i = 0; i < this->execution_capabilities_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->execution_capabilities(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _execution_capabilities_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .sacred.proto.Device.QueueProperty queue_properties = 51;
  {
    int data_size = 0;
    for (int i = 0; i < this->queue_properties_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->queue_properties(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _queue_properties_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  maximum_work_item_sizes_.MergeFrom(from.maximum_work_item_sizes_);
  single_floating_point_configuration_.MergeFrom(from.single_floating_point_configuration_);
  execution_capabilities_.MergeFrom(from.execution_capabilities_);
  queue_properties_.MergeFrom(from.queue_properties_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.vendor_identifier() != 0) {
    set_vendor_identifier(from.vendor_identifier());
  }
  if (from.maximum_compute_units() != 0) {
    set_maximum_compute_units(from.maximum_compute_units());
  }
  if (from.maximum_work_item_dimensions() != 0) {
    set_maximum_work_item_dimensions(from.maximum_work_item_dimensions());
  }
  if (from.maximum_work_group_size() != 0) {
    set_maximum_work_group_size(from.maximum_work_group_size());
  }
  if (from.preferred_vector_width_character() != 0) {
    set_preferred_vector_width_character(from.preferred_vector_width_character());
  }
  if (from.preferred_vector_width_short() != 0) {
    set_preferred_vector_width_short(from.preferred_vector_width_short());
  }
  if (from.preferred_vector_width_integer() != 0) {
    set_preferred_vector_width_integer(from.preferred_vector_width_integer());
  }
  if (from.preferred_vector_width_long() != 0) {
    set_preferred_vector_width_long(from.preferred_vector_width_long());
  }
  if (from.preferred_vector_width_float() != 0) {
    set_preferred_vector_width_float(from.preferred_vector_width_float());
  }
  if (from.preferred_vector_width_double() != 0) {
    set_preferred_vector_width_double(from.preferred_vector_width_double());
  }
  if (from.preferred_vector_width_half() != 0) {
    set_preferred_vector_width_half(from.preferred_vector_width_half());
  }
  if (from.native_vector_width_character() != 0) {
    set_native_vector_width_character(from.native_vector_width_character());
  }
  if (from.native_vector_width_short() != 0) {
    set_native_vector_width_short(from.native_vector_width_short());
  }
  if (from.native_vector_width_integer() != 0) {
    set_native_vector_width_integer(from.native_vector_width_integer());
  }
  if (from.native_vector_width_long() != 0) {
    set_native_vector_width_long(from.native_vector_width_long());
  }
  if (from.native_vector_width_float() != 0) {
    set_native_vector_width_float(from.native_vector_width_float());
  }
  if (from.native_vector_width_double() != 0) {
    set_native_vector_width_double(from.native_vector_width_double());
  }
  if (from.native_vector_width_half() != 0) {
    set_native_vector_width_half(from.native_vector_width_half());
  }
  if (from.address_bits() != 0) {
    set_address_bits(from.address_bits());
  }
  if (from.maximum_memory_allocation_size() != 0) {
    set_maximum_memory_allocation_size(from.maximum_memory_allocation_size());
  }
  if (from.image_support() != 0) {
    set_image_support(from.image_support());
  }
  if (from.maximum_read_image_arguments() != 0) {
    set_maximum_read_image_arguments(from.maximum_read_image_arguments());
  }
  if (from.maximum_write_image_arguments() != 0) {
    set_maximum_write_image_arguments(from.maximum_write_image_arguments());
  }
  if (from.image2d_maximum_width() != 0) {
    set_image2d_maximum_width(from.image2d_maximum_width());
  }
  if (from.image2d_maximum_height() != 0) {
    set_image2d_maximum_height(from.image2d_maximum_height());
  }
  if (from.image3d_maximum_width() != 0) {
    set_image3d_maximum_width(from.image3d_maximum_width());
  }
  if (from.image3d_maximum_height() != 0) {
    set_image3d_maximum_height(from.image3d_maximum_height());
  }
  if (from.image3d_maximum_depth() != 0) {
    set_image3d_maximum_depth(from.image3d_maximum_depth());
  }
  if (from.maximum_samplers() != 0) {
    set_maximum_samplers(from.maximum_samplers());
  }
  if (from.maximum_parameter_size() != 0) {
    set_maximum_parameter_size(from.maximum_parameter_size());
  }
  if (from.memory_base_address_alignment() != 0) {
    set_memory_base_address_alignment(from.memory_base_address_alignment());
  }
  if (from.minimum_data_type_alignment_size() != 0) {
    set_minimum_data_type_alignment_size(from.minimum_data_type_alignment_size());
  }
  if (from.global_memory_cache_type() != 0) {
    set_global_memory_cache_type(from.global_memory_cache_type());
  }
  if (from.global_memory_cacheline_size() != 0) {
    set_global_memory_cacheline_size(from.global_memory_cacheline_size());
  }
  if (from.global_memory_cache_size() != 0) {
    set_global_memory_cache_size(from.global_memory_cache_size());
  }
  if (from.global_memory_size() != 0) {
    set_global_memory_size(from.global_memory_size());
  }
  if (from.maximum_constant_buffer_size() != 0) {
    set_maximum_constant_buffer_size(from.maximum_constant_buffer_size());
  }
  if (from.maximum_constant_arguments() != 0) {
    set_maximum_constant_arguments(from.maximum_constant_arguments());
  }
  if (from.local_memory_type() != 0) {
    set_local_memory_type(from.local_memory_type());
  }
  if (from.local_memory_size() != 0) {
    set_local_memory_size(from.local_memory_size());
  }
  if (from.error_correction_support() != 0) {
    set_error_correction_support(from.error_correction_support());
  }
  if (from.host_unified_memory() != 0) {
    set_host_unified_memory(from.host_unified_memory());
  }
  if (from.profiling_timer_resolution() != 0) {
    set_profiling_timer_resolution(from.profiling_timer_resolution());
  }
  if (from.endian_little() != 0) {
    set_endian_little(from.endian_little());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
  if (from.compiler_available() != 0) {
    set_compiler_available(from.compiler_available());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.vendor().size() > 0) {

    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.driver_version().size() > 0) {

    driver_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
  }
  if (from.profile().size() > 0) {

    profile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.opencl_c_version().size() > 0) {

    opencl_c_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opencl_c_version_);
  }
  if (from.extensions().size() > 0) {

    extensions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extensions_);
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {

  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  std::swap(type_, other->type_);
  std::swap(vendor_identifier_, other->vendor_identifier_);
  std::swap(maximum_compute_units_, other->maximum_compute_units_);
  std::swap(maximum_work_item_dimensions_, other->maximum_work_item_dimensions_);
  maximum_work_item_sizes_.UnsafeArenaSwap(&other->maximum_work_item_sizes_);
  std::swap(maximum_work_group_size_, other->maximum_work_group_size_);
  std::swap(preferred_vector_width_character_, other->preferred_vector_width_character_);
  std::swap(preferred_vector_width_short_, other->preferred_vector_width_short_);
  std::swap(preferred_vector_width_integer_, other->preferred_vector_width_integer_);
  std::swap(preferred_vector_width_long_, other->preferred_vector_width_long_);
  std::swap(preferred_vector_width_float_, other->preferred_vector_width_float_);
  std::swap(preferred_vector_width_double_, other->preferred_vector_width_double_);
  std::swap(preferred_vector_width_half_, other->preferred_vector_width_half_);
  std::swap(native_vector_width_character_, other->native_vector_width_character_);
  std::swap(native_vector_width_short_, other->native_vector_width_short_);
  std::swap(native_vector_width_integer_, other->native_vector_width_integer_);
  std::swap(native_vector_width_long_, other->native_vector_width_long_);
  std::swap(native_vector_width_float_, other->native_vector_width_float_);
  std::swap(native_vector_width_double_, other->native_vector_width_double_);
  std::swap(native_vector_width_half_, other->native_vector_width_half_);
  std::swap(address_bits_, other->address_bits_);
  std::swap(maximum_memory_allocation_size_, other->maximum_memory_allocation_size_);
  std::swap(image_support_, other->image_support_);
  std::swap(maximum_read_image_arguments_, other->maximum_read_image_arguments_);
  std::swap(maximum_write_image_arguments_, other->maximum_write_image_arguments_);
  std::swap(image2d_maximum_width_, other->image2d_maximum_width_);
  std::swap(image2d_maximum_height_, other->image2d_maximum_height_);
  std::swap(image3d_maximum_width_, other->image3d_maximum_width_);
  std::swap(image3d_maximum_height_, other->image3d_maximum_height_);
  std::swap(image3d_maximum_depth_, other->image3d_maximum_depth_);
  std::swap(maximum_samplers_, other->maximum_samplers_);
  std::swap(maximum_parameter_size_, other->maximum_parameter_size_);
  std::swap(memory_base_address_alignment_, other->memory_base_address_alignment_);
  std::swap(minimum_data_type_alignment_size_, other->minimum_data_type_alignment_size_);
  single_floating_point_configuration_.UnsafeArenaSwap(&other->single_floating_point_configuration_);
  std::swap(global_memory_cache_type_, other->global_memory_cache_type_);
  std::swap(global_memory_cacheline_size_, other->global_memory_cacheline_size_);
  std::swap(global_memory_cache_size_, other->global_memory_cache_size_);
  std::swap(global_memory_size_, other->global_memory_size_);
  std::swap(maximum_constant_buffer_size_, other->maximum_constant_buffer_size_);
  std::swap(maximum_constant_arguments_, other->maximum_constant_arguments_);
  std::swap(local_memory_type_, other->local_memory_type_);
  std::swap(local_memory_size_, other->local_memory_size_);
  std::swap(error_correction_support_, other->error_correction_support_);
  std::swap(host_unified_memory_, other->host_unified_memory_);
  std::swap(profiling_timer_resolution_, other->profiling_timer_resolution_);
  std::swap(endian_little_, other->endian_little_);
  std::swap(available_, other->available_);
  std::swap(compiler_available_, other->compiler_available_);
  execution_capabilities_.UnsafeArenaSwap(&other->execution_capabilities_);
  queue_properties_.UnsafeArenaSwap(&other->queue_properties_);
  name_.Swap(&other->name_);
  vendor_.Swap(&other->vendor_);
  driver_version_.Swap(&other->driver_version_);
  profile_.Swap(&other->profile_);
  version_.Swap(&other->version_);
  opencl_c_version_.Swap(&other->opencl_c_version_);
  extensions_.Swap(&other->extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// optional .sacred.proto.Device.Type type = 1;
void Device::clear_type() {
  type_ = 0;
}
 ::sacred::proto::Device_Type Device::type() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.type)
  return static_cast< ::sacred::proto::Device_Type >(type_);
}
 void Device::set_type(::sacred::proto::Device_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.type)
}

// optional uint32 vendor_identifier = 2;
void Device::clear_vendor_identifier() {
  vendor_identifier_ = 0u;
}
 ::google::protobuf::uint32 Device::vendor_identifier() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.vendor_identifier)
  return vendor_identifier_;
}
 void Device::set_vendor_identifier(::google::protobuf::uint32 value) {
  
  vendor_identifier_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.vendor_identifier)
}

// optional uint32 maximum_compute_units = 3;
void Device::clear_maximum_compute_units() {
  maximum_compute_units_ = 0u;
}
 ::google::protobuf::uint32 Device::maximum_compute_units() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_compute_units)
  return maximum_compute_units_;
}
 void Device::set_maximum_compute_units(::google::protobuf::uint32 value) {
  
  maximum_compute_units_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_compute_units)
}

// optional uint32 maximum_work_item_dimensions = 4;
void Device::clear_maximum_work_item_dimensions() {
  maximum_work_item_dimensions_ = 0u;
}
 ::google::protobuf::uint32 Device::maximum_work_item_dimensions() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_work_item_dimensions)
  return maximum_work_item_dimensions_;
}
 void Device::set_maximum_work_item_dimensions(::google::protobuf::uint32 value) {
  
  maximum_work_item_dimensions_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_work_item_dimensions)
}

// repeated uint64 maximum_work_item_sizes = 5;
int Device::maximum_work_item_sizes_size() const {
  return maximum_work_item_sizes_.size();
}
void Device::clear_maximum_work_item_sizes() {
  maximum_work_item_sizes_.Clear();
}
 ::google::protobuf::uint64 Device::maximum_work_item_sizes(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_work_item_sizes)
  return maximum_work_item_sizes_.Get(index);
}
 void Device::set_maximum_work_item_sizes(int index, ::google::protobuf::uint64 value) {
  maximum_work_item_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_work_item_sizes)
}
 void Device::add_maximum_work_item_sizes(::google::protobuf::uint64 value) {
  maximum_work_item_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:sacred.proto.Device.maximum_work_item_sizes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Device::maximum_work_item_sizes() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Device.maximum_work_item_sizes)
  return maximum_work_item_sizes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Device::mutable_maximum_work_item_sizes() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Device.maximum_work_item_sizes)
  return &maximum_work_item_sizes_;
}

// optional uint64 maximum_work_group_size = 6;
void Device::clear_maximum_work_group_size() {
  maximum_work_group_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::maximum_work_group_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_work_group_size)
  return maximum_work_group_size_;
}
 void Device::set_maximum_work_group_size(::google::protobuf::uint64 value) {
  
  maximum_work_group_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_work_group_size)
}

// optional uint32 preferred_vector_width_character = 7;
void Device::clear_preferred_vector_width_character() {
  preferred_vector_width_character_ = 0u;
}
 ::google::protobuf::uint32 Device::preferred_vector_width_character() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_character)
  return preferred_vector_width_character_;
}
 void Device::set_preferred_vector_width_character(::google::protobuf::uint32 value) {
  
  preferred_vector_width_character_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_character)
}

// optional uint32 preferred_vector_width_short = 8;
void Device::clear_preferred_vector_width_short() {
  preferred_vector_width_short_ = 0u;
}
 ::google::protobuf::uint32 Device::preferred_vector_width_short() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_short)
  return preferred_vector_width_short_;
}
 void Device::set_preferred_vector_width_short(::google::protobuf::uint32 value) {
  
  preferred_vector_width_short_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_short)
}

// optional uint32 preferred_vector_width_integer = 9;
void Device::clear_preferred_vector_width_integer() {
  preferred_vector_width_integer_ = 0u;
}
 ::google::protobuf::uint32 Device::preferred_vector_width_integer() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_integer)
  return preferred_vector_width_integer_;
}
 void Device::set_preferred_vector_width_integer(::google::protobuf::uint32 value) {
  
  preferred_vector_width_integer_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_integer)
}

// optional uint32 preferred_vector_width_long = 10;
void Device::clear_preferred_vector_width_long() {
  preferred_vector_width_long_ = 0u;
}
 ::google::protobuf::uint32 Device::preferred_vector_width_long() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_long)
  return preferred_vector_width_long_;
}
 void Device::set_preferred_vector_width_long(::google::protobuf::uint32 value) {
  
  preferred_vector_width_long_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_long)
}

// optional uint32 preferred_vector_width_float = 11;
void Device::clear_preferred_vector_width_float() {
  preferred_vector_width_float_ = 0u;
}
 ::google::protobuf::uint32 Device::preferred_vector_width_float() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_float)
  return preferred_vector_width_float_;
}
 void Device::set_preferred_vector_width_float(::google::protobuf::uint32 value) {
  
  preferred_vector_width_float_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_float)
}

// optional uint32 preferred_vector_width_double = 12;
void Device::clear_preferred_vector_width_double() {
  preferred_vector_width_double_ = 0u;
}
 ::google::protobuf::uint32 Device::preferred_vector_width_double() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_double)
  return preferred_vector_width_double_;
}
 void Device::set_preferred_vector_width_double(::google::protobuf::uint32 value) {
  
  preferred_vector_width_double_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_double)
}

// optional uint32 preferred_vector_width_half = 13;
void Device::clear_preferred_vector_width_half() {
  preferred_vector_width_half_ = 0u;
}
 ::google::protobuf::uint32 Device::preferred_vector_width_half() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_half)
  return preferred_vector_width_half_;
}
 void Device::set_preferred_vector_width_half(::google::protobuf::uint32 value) {
  
  preferred_vector_width_half_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_half)
}

// optional uint32 native_vector_width_character = 14;
void Device::clear_native_vector_width_character() {
  native_vector_width_character_ = 0u;
}
 ::google::protobuf::uint32 Device::native_vector_width_character() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_character)
  return native_vector_width_character_;
}
 void Device::set_native_vector_width_character(::google::protobuf::uint32 value) {
  
  native_vector_width_character_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_character)
}

// optional uint32 native_vector_width_short = 15;
void Device::clear_native_vector_width_short() {
  native_vector_width_short_ = 0u;
}
 ::google::protobuf::uint32 Device::native_vector_width_short() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_short)
  return native_vector_width_short_;
}
 void Device::set_native_vector_width_short(::google::protobuf::uint32 value) {
  
  native_vector_width_short_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_short)
}

// optional uint32 native_vector_width_integer = 16;
void Device::clear_native_vector_width_integer() {
  native_vector_width_integer_ = 0u;
}
 ::google::protobuf::uint32 Device::native_vector_width_integer() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_integer)
  return native_vector_width_integer_;
}
 void Device::set_native_vector_width_integer(::google::protobuf::uint32 value) {
  
  native_vector_width_integer_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_integer)
}

// optional uint32 native_vector_width_long = 17;
void Device::clear_native_vector_width_long() {
  native_vector_width_long_ = 0u;
}
 ::google::protobuf::uint32 Device::native_vector_width_long() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_long)
  return native_vector_width_long_;
}
 void Device::set_native_vector_width_long(::google::protobuf::uint32 value) {
  
  native_vector_width_long_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_long)
}

// optional uint32 native_vector_width_float = 18;
void Device::clear_native_vector_width_float() {
  native_vector_width_float_ = 0u;
}
 ::google::protobuf::uint32 Device::native_vector_width_float() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_float)
  return native_vector_width_float_;
}
 void Device::set_native_vector_width_float(::google::protobuf::uint32 value) {
  
  native_vector_width_float_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_float)
}

// optional uint32 native_vector_width_double = 19;
void Device::clear_native_vector_width_double() {
  native_vector_width_double_ = 0u;
}
 ::google::protobuf::uint32 Device::native_vector_width_double() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_double)
  return native_vector_width_double_;
}
 void Device::set_native_vector_width_double(::google::protobuf::uint32 value) {
  
  native_vector_width_double_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_double)
}

// optional uint32 native_vector_width_half = 20;
void Device::clear_native_vector_width_half() {
  native_vector_width_half_ = 0u;
}
 ::google::protobuf::uint32 Device::native_vector_width_half() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_half)
  return native_vector_width_half_;
}
 void Device::set_native_vector_width_half(::google::protobuf::uint32 value) {
  
  native_vector_width_half_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_half)
}

// optional uint32 address_bits = 21;
void Device::clear_address_bits() {
  address_bits_ = 0u;
}
 ::google::protobuf::uint32 Device::address_bits() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.address_bits)
  return address_bits_;
}
 void Device::set_address_bits(::google::protobuf::uint32 value) {
  
  address_bits_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.address_bits)
}

// optional uint64 maximum_memory_allocation_size = 22;
void Device::clear_maximum_memory_allocation_size() {
  maximum_memory_allocation_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::maximum_memory_allocation_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_memory_allocation_size)
  return maximum_memory_allocation_size_;
}
 void Device::set_maximum_memory_allocation_size(::google::protobuf::uint64 value) {
  
  maximum_memory_allocation_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_memory_allocation_size)
}

// optional bool image_support = 23;
void Device::clear_image_support() {
  image_support_ = false;
}
 bool Device::image_support() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image_support)
  return image_support_;
}
 void Device::set_image_support(bool value) {
  
  image_support_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image_support)
}

// optional uint32 maximum_read_image_arguments = 24;
void Device::clear_maximum_read_image_arguments() {
  maximum_read_image_arguments_ = 0u;
}
 ::google::protobuf::uint32 Device::maximum_read_image_arguments() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_read_image_arguments)
  return maximum_read_image_arguments_;
}
 void Device::set_maximum_read_image_arguments(::google::protobuf::uint32 value) {
  
  maximum_read_image_arguments_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_read_image_arguments)
}

// optional uint32 maximum_write_image_arguments = 25;
void Device::clear_maximum_write_image_arguments() {
  maximum_write_image_arguments_ = 0u;
}
 ::google::protobuf::uint32 Device::maximum_write_image_arguments() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_write_image_arguments)
  return maximum_write_image_arguments_;
}
 void Device::set_maximum_write_image_arguments(::google::protobuf::uint32 value) {
  
  maximum_write_image_arguments_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_write_image_arguments)
}

// optional uint64 image2d_maximum_width = 26;
void Device::clear_image2d_maximum_width() {
  image2d_maximum_width_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::image2d_maximum_width() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image2d_maximum_width)
  return image2d_maximum_width_;
}
 void Device::set_image2d_maximum_width(::google::protobuf::uint64 value) {
  
  image2d_maximum_width_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image2d_maximum_width)
}

// optional uint64 image2d_maximum_height = 27;
void Device::clear_image2d_maximum_height() {
  image2d_maximum_height_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::image2d_maximum_height() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image2d_maximum_height)
  return image2d_maximum_height_;
}
 void Device::set_image2d_maximum_height(::google::protobuf::uint64 value) {
  
  image2d_maximum_height_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image2d_maximum_height)
}

// optional uint64 image3d_maximum_width = 28;
void Device::clear_image3d_maximum_width() {
  image3d_maximum_width_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::image3d_maximum_width() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image3d_maximum_width)
  return image3d_maximum_width_;
}
 void Device::set_image3d_maximum_width(::google::protobuf::uint64 value) {
  
  image3d_maximum_width_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image3d_maximum_width)
}

// optional uint64 image3d_maximum_height = 29;
void Device::clear_image3d_maximum_height() {
  image3d_maximum_height_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::image3d_maximum_height() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image3d_maximum_height)
  return image3d_maximum_height_;
}
 void Device::set_image3d_maximum_height(::google::protobuf::uint64 value) {
  
  image3d_maximum_height_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image3d_maximum_height)
}

// optional uint64 image3d_maximum_depth = 30;
void Device::clear_image3d_maximum_depth() {
  image3d_maximum_depth_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::image3d_maximum_depth() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image3d_maximum_depth)
  return image3d_maximum_depth_;
}
 void Device::set_image3d_maximum_depth(::google::protobuf::uint64 value) {
  
  image3d_maximum_depth_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image3d_maximum_depth)
}

// optional uint32 maximum_samplers = 31;
void Device::clear_maximum_samplers() {
  maximum_samplers_ = 0u;
}
 ::google::protobuf::uint32 Device::maximum_samplers() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_samplers)
  return maximum_samplers_;
}
 void Device::set_maximum_samplers(::google::protobuf::uint32 value) {
  
  maximum_samplers_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_samplers)
}

// optional uint64 maximum_parameter_size = 32;
void Device::clear_maximum_parameter_size() {
  maximum_parameter_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::maximum_parameter_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_parameter_size)
  return maximum_parameter_size_;
}
 void Device::set_maximum_parameter_size(::google::protobuf::uint64 value) {
  
  maximum_parameter_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_parameter_size)
}

// optional uint32 memory_base_address_alignment = 33;
void Device::clear_memory_base_address_alignment() {
  memory_base_address_alignment_ = 0u;
}
 ::google::protobuf::uint32 Device::memory_base_address_alignment() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.memory_base_address_alignment)
  return memory_base_address_alignment_;
}
 void Device::set_memory_base_address_alignment(::google::protobuf::uint32 value) {
  
  memory_base_address_alignment_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.memory_base_address_alignment)
}

// optional uint32 minimum_data_type_alignment_size = 34;
void Device::clear_minimum_data_type_alignment_size() {
  minimum_data_type_alignment_size_ = 0u;
}
 ::google::protobuf::uint32 Device::minimum_data_type_alignment_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.minimum_data_type_alignment_size)
  return minimum_data_type_alignment_size_;
}
 void Device::set_minimum_data_type_alignment_size(::google::protobuf::uint32 value) {
  
  minimum_data_type_alignment_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.minimum_data_type_alignment_size)
}

// repeated .sacred.proto.Device.FloatingPointConfiguration single_floating_point_configuration = 35;
int Device::single_floating_point_configuration_size() const {
  return single_floating_point_configuration_.size();
}
void Device::clear_single_floating_point_configuration() {
  single_floating_point_configuration_.Clear();
}
 ::sacred::proto::Device_FloatingPointConfiguration Device::single_floating_point_configuration(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.single_floating_point_configuration)
  return static_cast< ::sacred::proto::Device_FloatingPointConfiguration >(single_floating_point_configuration_.Get(index));
}
 void Device::set_single_floating_point_configuration(int index, ::sacred::proto::Device_FloatingPointConfiguration value) {
  single_floating_point_configuration_.Set(index, value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.single_floating_point_configuration)
}
 void Device::add_single_floating_point_configuration(::sacred::proto::Device_FloatingPointConfiguration value) {
  single_floating_point_configuration_.Add(value);
  // @@protoc_insertion_point(field_add:sacred.proto.Device.single_floating_point_configuration)
}
 const ::google::protobuf::RepeatedField<int>&
Device::single_floating_point_configuration() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Device.single_floating_point_configuration)
  return single_floating_point_configuration_;
}
 ::google::protobuf::RepeatedField<int>*
Device::mutable_single_floating_point_configuration() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Device.single_floating_point_configuration)
  return &single_floating_point_configuration_;
}

// optional .sacred.proto.Device.MemoryCacheType global_memory_cache_type = 36;
void Device::clear_global_memory_cache_type() {
  global_memory_cache_type_ = 0;
}
 ::sacred::proto::Device_MemoryCacheType Device::global_memory_cache_type() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.global_memory_cache_type)
  return static_cast< ::sacred::proto::Device_MemoryCacheType >(global_memory_cache_type_);
}
 void Device::set_global_memory_cache_type(::sacred::proto::Device_MemoryCacheType value) {
  
  global_memory_cache_type_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.global_memory_cache_type)
}

// optional uint32 global_memory_cacheline_size = 37;
void Device::clear_global_memory_cacheline_size() {
  global_memory_cacheline_size_ = 0u;
}
 ::google::protobuf::uint32 Device::global_memory_cacheline_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.global_memory_cacheline_size)
  return global_memory_cacheline_size_;
}
 void Device::set_global_memory_cacheline_size(::google::protobuf::uint32 value) {
  
  global_memory_cacheline_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.global_memory_cacheline_size)
}

// optional uint64 global_memory_cache_size = 38;
void Device::clear_global_memory_cache_size() {
  global_memory_cache_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::global_memory_cache_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.global_memory_cache_size)
  return global_memory_cache_size_;
}
 void Device::set_global_memory_cache_size(::google::protobuf::uint64 value) {
  
  global_memory_cache_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.global_memory_cache_size)
}

// optional uint64 global_memory_size = 39;
void Device::clear_global_memory_size() {
  global_memory_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::global_memory_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.global_memory_size)
  return global_memory_size_;
}
 void Device::set_global_memory_size(::google::protobuf::uint64 value) {
  
  global_memory_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.global_memory_size)
}

// optional uint64 maximum_constant_buffer_size = 40;
void Device::clear_maximum_constant_buffer_size() {
  maximum_constant_buffer_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::maximum_constant_buffer_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_constant_buffer_size)
  return maximum_constant_buffer_size_;
}
 void Device::set_maximum_constant_buffer_size(::google::protobuf::uint64 value) {
  
  maximum_constant_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_constant_buffer_size)
}

// optional uint32 maximum_constant_arguments = 41;
void Device::clear_maximum_constant_arguments() {
  maximum_constant_arguments_ = 0u;
}
 ::google::protobuf::uint32 Device::maximum_constant_arguments() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_constant_arguments)
  return maximum_constant_arguments_;
}
 void Device::set_maximum_constant_arguments(::google::protobuf::uint32 value) {
  
  maximum_constant_arguments_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_constant_arguments)
}

// optional .sacred.proto.Device.LocalMemoryType local_memory_type = 42;
void Device::clear_local_memory_type() {
  local_memory_type_ = 0;
}
 ::sacred::proto::Device_LocalMemoryType Device::local_memory_type() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.local_memory_type)
  return static_cast< ::sacred::proto::Device_LocalMemoryType >(local_memory_type_);
}
 void Device::set_local_memory_type(::sacred::proto::Device_LocalMemoryType value) {
  
  local_memory_type_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.local_memory_type)
}

// optional uint64 local_memory_size = 43;
void Device::clear_local_memory_size() {
  local_memory_size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::local_memory_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.local_memory_size)
  return local_memory_size_;
}
 void Device::set_local_memory_size(::google::protobuf::uint64 value) {
  
  local_memory_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.local_memory_size)
}

// optional bool error_correction_support = 44;
void Device::clear_error_correction_support() {
  error_correction_support_ = false;
}
 bool Device::error_correction_support() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.error_correction_support)
  return error_correction_support_;
}
 void Device::set_error_correction_support(bool value) {
  
  error_correction_support_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.error_correction_support)
}

// optional bool host_unified_memory = 45;
void Device::clear_host_unified_memory() {
  host_unified_memory_ = false;
}
 bool Device::host_unified_memory() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.host_unified_memory)
  return host_unified_memory_;
}
 void Device::set_host_unified_memory(bool value) {
  
  host_unified_memory_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.host_unified_memory)
}

// optional uint64 profiling_timer_resolution = 46;
void Device::clear_profiling_timer_resolution() {
  profiling_timer_resolution_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Device::profiling_timer_resolution() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.profiling_timer_resolution)
  return profiling_timer_resolution_;
}
 void Device::set_profiling_timer_resolution(::google::protobuf::uint64 value) {
  
  profiling_timer_resolution_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.profiling_timer_resolution)
}

// optional bool endian_little = 47;
void Device::clear_endian_little() {
  endian_little_ = false;
}
 bool Device::endian_little() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.endian_little)
  return endian_little_;
}
 void Device::set_endian_little(bool value) {
  
  endian_little_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.endian_little)
}

// optional bool available = 48;
void Device::clear_available() {
  available_ = false;
}
 bool Device::available() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.available)
  return available_;
}
 void Device::set_available(bool value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.available)
}

// optional bool compiler_available = 49;
void Device::clear_compiler_available() {
  compiler_available_ = false;
}
 bool Device::compiler_available() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.compiler_available)
  return compiler_available_;
}
 void Device::set_compiler_available(bool value) {
  
  compiler_available_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.compiler_available)
}

// repeated .sacred.proto.Device.ExecutionCapability execution_capabilities = 50;
int Device::execution_capabilities_size() const {
  return execution_capabilities_.size();
}
void Device::clear_execution_capabilities() {
  execution_capabilities_.Clear();
}
 ::sacred::proto::Device_ExecutionCapability Device::execution_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.execution_capabilities)
  return static_cast< ::sacred::proto::Device_ExecutionCapability >(execution_capabilities_.Get(index));
}
 void Device::set_execution_capabilities(int index, ::sacred::proto::Device_ExecutionCapability value) {
  execution_capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.execution_capabilities)
}
 void Device::add_execution_capabilities(::sacred::proto::Device_ExecutionCapability value) {
  execution_capabilities_.Add(value);
  // @@protoc_insertion_point(field_add:sacred.proto.Device.execution_capabilities)
}
 const ::google::protobuf::RepeatedField<int>&
Device::execution_capabilities() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Device.execution_capabilities)
  return execution_capabilities_;
}
 ::google::protobuf::RepeatedField<int>*
Device::mutable_execution_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Device.execution_capabilities)
  return &execution_capabilities_;
}

// repeated .sacred.proto.Device.QueueProperty queue_properties = 51;
int Device::queue_properties_size() const {
  return queue_properties_.size();
}
void Device::clear_queue_properties() {
  queue_properties_.Clear();
}
 ::sacred::proto::Device_QueueProperty Device::queue_properties(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.queue_properties)
  return static_cast< ::sacred::proto::Device_QueueProperty >(queue_properties_.Get(index));
}
 void Device::set_queue_properties(int index, ::sacred::proto::Device_QueueProperty value) {
  queue_properties_.Set(index, value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.queue_properties)
}
 void Device::add_queue_properties(::sacred::proto::Device_QueueProperty value) {
  queue_properties_.Add(value);
  // @@protoc_insertion_point(field_add:sacred.proto.Device.queue_properties)
}
 const ::google::protobuf::RepeatedField<int>&
Device::queue_properties() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Device.queue_properties)
  return queue_properties_;
}
 ::google::protobuf::RepeatedField<int>*
Device::mutable_queue_properties() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Device.queue_properties)
  return &queue_properties_;
}

// optional string name = 52;
void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.name)
}
 void Device::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.name)
}
 void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.name)
}
 ::std::string* Device::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.name)
}

// optional string vendor = 53;
void Device::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::vendor() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.vendor)
}
 void Device::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.vendor)
}
 void Device::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.vendor)
}
 ::std::string* Device::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.vendor)
}

// optional string driver_version = 54;
void Device::clear_driver_version() {
  driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::driver_version() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.driver_version)
  return driver_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_driver_version(const ::std::string& value) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.driver_version)
}
 void Device::set_driver_version(const char* value) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.driver_version)
}
 void Device::set_driver_version(const char* value, size_t size) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.driver_version)
}
 ::std::string* Device::mutable_driver_version() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.driver_version)
  return driver_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_driver_version() {
  
  return driver_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_driver_version(::std::string* driver_version) {
  if (driver_version != NULL) {
    
  } else {
    
  }
  driver_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_version);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.driver_version)
}

// optional string profile = 55;
void Device::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::profile() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.profile)
  return profile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.profile)
}
 void Device::set_profile(const char* value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.profile)
}
 void Device::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.profile)
}
 ::std::string* Device::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_profile() {
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.profile)
}

// optional string version = 56;
void Device::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::version() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.version)
}
 void Device::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.version)
}
 void Device::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.version)
}
 ::std::string* Device::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.version)
}

// optional string opencl_c_version = 57;
void Device::clear_opencl_c_version() {
  opencl_c_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::opencl_c_version() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.opencl_c_version)
  return opencl_c_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_opencl_c_version(const ::std::string& value) {
  
  opencl_c_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.opencl_c_version)
}
 void Device::set_opencl_c_version(const char* value) {
  
  opencl_c_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.opencl_c_version)
}
 void Device::set_opencl_c_version(const char* value, size_t size) {
  
  opencl_c_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.opencl_c_version)
}
 ::std::string* Device::mutable_opencl_c_version() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.opencl_c_version)
  return opencl_c_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_opencl_c_version() {
  
  return opencl_c_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_opencl_c_version(::std::string* opencl_c_version) {
  if (opencl_c_version != NULL) {
    
  } else {
    
  }
  opencl_c_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opencl_c_version);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.opencl_c_version)
}

// optional string extensions = 58;
void Device::clear_extensions() {
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::extensions() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.extensions)
  return extensions_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_extensions(const ::std::string& value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.extensions)
}
 void Device::set_extensions(const char* value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.extensions)
}
 void Device::set_extensions(const char* value, size_t size) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.extensions)
}
 ::std::string* Device::mutable_extensions() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.extensions)
  return extensions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_extensions() {
  
  return extensions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_extensions(::std::string* extensions) {
  if (extensions != NULL) {
    
  } else {
    
  }
  extensions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extensions);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.extensions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sacred

// @@protoc_insertion_point(global_scope)
