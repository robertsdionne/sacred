// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sacred/proto/opencl.proto

#ifndef PROTOBUF_sacred_2fproto_2fopencl_2eproto__INCLUDED
#define PROTOBUF_sacred_2fproto_2fopencl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sacred {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
void protobuf_AssignDesc_sacred_2fproto_2fopencl_2eproto();
void protobuf_ShutdownFile_sacred_2fproto_2fopencl_2eproto();

class Device;
class OpenCl;
class Platform;

enum Device_Type {
  Device_Type_TYPE_NONE = 0,
  Device_Type_DEFAULT = 1,
  Device_Type_CPU = 2,
  Device_Type_GPU = 4,
  Device_Type_ACCELERATOR = 8,
  Device_Type_CUSTOM = 16,
  Device_Type_Device_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_Type_Device_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_Type_IsValid(int value);
const Device_Type Device_Type_Type_MIN = Device_Type_TYPE_NONE;
const Device_Type Device_Type_Type_MAX = Device_Type_CUSTOM;
const int Device_Type_Type_ARRAYSIZE = Device_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_Type_descriptor();
inline const ::std::string& Device_Type_Name(Device_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_Type_descriptor(), value);
}
inline bool Device_Type_Parse(
    const ::std::string& name, Device_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_Type>(
    Device_Type_descriptor(), name, value);
}
enum Device_FloatingPointConfiguration {
  Device_FloatingPointConfiguration_FLOATING_POINT_CONFIGURATION_NONE = 0,
  Device_FloatingPointConfiguration_DENORMALIZED = 1,
  Device_FloatingPointConfiguration_INFINITY_NOT_A_NUMBER = 2,
  Device_FloatingPointConfiguration_ROUND_TO_NEAREST = 4,
  Device_FloatingPointConfiguration_ROUND_TO_ZERO = 8,
  Device_FloatingPointConfiguration_ROUND_TO_INFINITY = 16,
  Device_FloatingPointConfiguration_ROUND_TO_FUSED_MULTIPLY_ADD = 32,
  Device_FloatingPointConfiguration_ROUND_TO_SOFTWARE_FLOAT = 64,
  Device_FloatingPointConfiguration_CORRECTLY_ROUNDED_DIVIDE_SQRT = 128,
  Device_FloatingPointConfiguration_Device_FloatingPointConfiguration_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_FloatingPointConfiguration_Device_FloatingPointConfiguration_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_FloatingPointConfiguration_IsValid(int value);
const Device_FloatingPointConfiguration Device_FloatingPointConfiguration_FloatingPointConfiguration_MIN = Device_FloatingPointConfiguration_FLOATING_POINT_CONFIGURATION_NONE;
const Device_FloatingPointConfiguration Device_FloatingPointConfiguration_FloatingPointConfiguration_MAX = Device_FloatingPointConfiguration_CORRECTLY_ROUNDED_DIVIDE_SQRT;
const int Device_FloatingPointConfiguration_FloatingPointConfiguration_ARRAYSIZE = Device_FloatingPointConfiguration_FloatingPointConfiguration_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_FloatingPointConfiguration_descriptor();
inline const ::std::string& Device_FloatingPointConfiguration_Name(Device_FloatingPointConfiguration value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_FloatingPointConfiguration_descriptor(), value);
}
inline bool Device_FloatingPointConfiguration_Parse(
    const ::std::string& name, Device_FloatingPointConfiguration* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_FloatingPointConfiguration>(
    Device_FloatingPointConfiguration_descriptor(), name, value);
}
enum Device_MemoryCacheType {
  Device_MemoryCacheType_MEMORY_CACHE_NONE = 0,
  Device_MemoryCacheType_READ_ONLY = 1,
  Device_MemoryCacheType_READ_WRITE = 2,
  Device_MemoryCacheType_Device_MemoryCacheType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_MemoryCacheType_Device_MemoryCacheType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_MemoryCacheType_IsValid(int value);
const Device_MemoryCacheType Device_MemoryCacheType_MemoryCacheType_MIN = Device_MemoryCacheType_MEMORY_CACHE_NONE;
const Device_MemoryCacheType Device_MemoryCacheType_MemoryCacheType_MAX = Device_MemoryCacheType_READ_WRITE;
const int Device_MemoryCacheType_MemoryCacheType_ARRAYSIZE = Device_MemoryCacheType_MemoryCacheType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_MemoryCacheType_descriptor();
inline const ::std::string& Device_MemoryCacheType_Name(Device_MemoryCacheType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_MemoryCacheType_descriptor(), value);
}
inline bool Device_MemoryCacheType_Parse(
    const ::std::string& name, Device_MemoryCacheType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_MemoryCacheType>(
    Device_MemoryCacheType_descriptor(), name, value);
}
enum Device_LocalMemoryType {
  Device_LocalMemoryType_LOCAL_MEMORY_NONE = 0,
  Device_LocalMemoryType_LOCAL = 1,
  Device_LocalMemoryType_GLOBAL = 2,
  Device_LocalMemoryType_Device_LocalMemoryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_LocalMemoryType_Device_LocalMemoryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_LocalMemoryType_IsValid(int value);
const Device_LocalMemoryType Device_LocalMemoryType_LocalMemoryType_MIN = Device_LocalMemoryType_LOCAL_MEMORY_NONE;
const Device_LocalMemoryType Device_LocalMemoryType_LocalMemoryType_MAX = Device_LocalMemoryType_GLOBAL;
const int Device_LocalMemoryType_LocalMemoryType_ARRAYSIZE = Device_LocalMemoryType_LocalMemoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_LocalMemoryType_descriptor();
inline const ::std::string& Device_LocalMemoryType_Name(Device_LocalMemoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_LocalMemoryType_descriptor(), value);
}
inline bool Device_LocalMemoryType_Parse(
    const ::std::string& name, Device_LocalMemoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_LocalMemoryType>(
    Device_LocalMemoryType_descriptor(), name, value);
}
enum Device_ExecutionCapability {
  Device_ExecutionCapability_EXECUTION_CAPABILITY_NONE = 0,
  Device_ExecutionCapability_KERNEL = 1,
  Device_ExecutionCapability_NATIVE_KERNEL = 2,
  Device_ExecutionCapability_Device_ExecutionCapability_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_ExecutionCapability_Device_ExecutionCapability_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_ExecutionCapability_IsValid(int value);
const Device_ExecutionCapability Device_ExecutionCapability_ExecutionCapability_MIN = Device_ExecutionCapability_EXECUTION_CAPABILITY_NONE;
const Device_ExecutionCapability Device_ExecutionCapability_ExecutionCapability_MAX = Device_ExecutionCapability_NATIVE_KERNEL;
const int Device_ExecutionCapability_ExecutionCapability_ARRAYSIZE = Device_ExecutionCapability_ExecutionCapability_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_ExecutionCapability_descriptor();
inline const ::std::string& Device_ExecutionCapability_Name(Device_ExecutionCapability value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_ExecutionCapability_descriptor(), value);
}
inline bool Device_ExecutionCapability_Parse(
    const ::std::string& name, Device_ExecutionCapability* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_ExecutionCapability>(
    Device_ExecutionCapability_descriptor(), name, value);
}
enum Device_QueueProperty {
  Device_QueueProperty_QUEUE_PROPERTY_NONE = 0,
  Device_QueueProperty_OUT_OF_ORDER_EXECUTION_MODE_ENABLE = 1,
  Device_QueueProperty_PROFILING_ENABLE = 2,
  Device_QueueProperty_Device_QueueProperty_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_QueueProperty_Device_QueueProperty_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_QueueProperty_IsValid(int value);
const Device_QueueProperty Device_QueueProperty_QueueProperty_MIN = Device_QueueProperty_QUEUE_PROPERTY_NONE;
const Device_QueueProperty Device_QueueProperty_QueueProperty_MAX = Device_QueueProperty_PROFILING_ENABLE;
const int Device_QueueProperty_QueueProperty_ARRAYSIZE = Device_QueueProperty_QueueProperty_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_QueueProperty_descriptor();
inline const ::std::string& Device_QueueProperty_Name(Device_QueueProperty value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_QueueProperty_descriptor(), value);
}
inline bool Device_QueueProperty_Parse(
    const ::std::string& name, Device_QueueProperty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_QueueProperty>(
    Device_QueueProperty_descriptor(), name, value);
}
// ===================================================================

class OpenCl : public ::google::protobuf::Message {
 public:
  OpenCl();
  virtual ~OpenCl();

  OpenCl(const OpenCl& from);

  inline OpenCl& operator=(const OpenCl& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenCl& default_instance();

  void Swap(OpenCl* other);

  // implements Message ----------------------------------------------

  inline OpenCl* New() const { return New(NULL); }

  OpenCl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenCl& from);
  void MergeFrom(const OpenCl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenCl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sacred.proto.Platform platform = 1;
  int platform_size() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 1;
  const ::sacred::proto::Platform& platform(int index) const;
  ::sacred::proto::Platform* mutable_platform(int index);
  ::sacred::proto::Platform* add_platform();
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Platform >*
      mutable_platform();
  const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Platform >&
      platform() const;

  // @@protoc_insertion_point(class_scope:sacred.proto.OpenCl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Platform > platform_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fopencl_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fopencl_2eproto();

  void InitAsDefaultInstance();
  static OpenCl* default_instance_;
};
// -------------------------------------------------------------------

class Platform : public ::google::protobuf::Message {
 public:
  Platform();
  virtual ~Platform();

  Platform(const Platform& from);

  inline Platform& operator=(const Platform& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Platform& default_instance();

  void Swap(Platform* other);

  // implements Message ----------------------------------------------

  inline Platform* New() const { return New(NULL); }

  Platform* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Platform& from);
  void MergeFrom(const Platform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Platform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string profile = 1;
  void clear_profile();
  static const int kProfileFieldNumber = 1;
  const ::std::string& profile() const;
  void set_profile(const ::std::string& value);
  void set_profile(const char* value);
  void set_profile(const char* value, size_t size);
  ::std::string* mutable_profile();
  ::std::string* release_profile();
  void set_allocated_profile(::std::string* profile);

  // optional string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string vendor = 4;
  void clear_vendor();
  static const int kVendorFieldNumber = 4;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // optional string extensions = 5;
  void clear_extensions();
  static const int kExtensionsFieldNumber = 5;
  const ::std::string& extensions() const;
  void set_extensions(const ::std::string& value);
  void set_extensions(const char* value);
  void set_extensions(const char* value, size_t size);
  ::std::string* mutable_extensions();
  ::std::string* release_extensions();
  void set_allocated_extensions(::std::string* extensions);

  // repeated .sacred.proto.Device device = 6;
  int device_size() const;
  void clear_device();
  static const int kDeviceFieldNumber = 6;
  const ::sacred::proto::Device& device(int index) const;
  ::sacred::proto::Device* mutable_device(int index);
  ::sacred::proto::Device* add_device();
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Device >*
      mutable_device();
  const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Device >&
      device() const;

  // @@protoc_insertion_point(class_scope:sacred.proto.Platform)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr profile_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::internal::ArenaStringPtr extensions_;
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Device > device_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fopencl_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fopencl_2eproto();

  void InitAsDefaultInstance();
  static Platform* default_instance_;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  void Swap(Device* other);

  // implements Message ----------------------------------------------

  inline Device* New() const { return New(NULL); }

  Device* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Device_Type Type;
  static const Type TYPE_NONE = Device_Type_TYPE_NONE;
  static const Type DEFAULT = Device_Type_DEFAULT;
  static const Type CPU = Device_Type_CPU;
  static const Type GPU = Device_Type_GPU;
  static const Type ACCELERATOR = Device_Type_ACCELERATOR;
  static const Type CUSTOM = Device_Type_CUSTOM;
  static inline bool Type_IsValid(int value) {
    return Device_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Device_Type_Type_MIN;
  static const Type Type_MAX =
    Device_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Device_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Device_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Device_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Device_Type_Parse(name, value);
  }

  typedef Device_FloatingPointConfiguration FloatingPointConfiguration;
  static const FloatingPointConfiguration FLOATING_POINT_CONFIGURATION_NONE = Device_FloatingPointConfiguration_FLOATING_POINT_CONFIGURATION_NONE;
  static const FloatingPointConfiguration DENORMALIZED = Device_FloatingPointConfiguration_DENORMALIZED;
  static const FloatingPointConfiguration INFINITY_NOT_A_NUMBER = Device_FloatingPointConfiguration_INFINITY_NOT_A_NUMBER;
  static const FloatingPointConfiguration ROUND_TO_NEAREST = Device_FloatingPointConfiguration_ROUND_TO_NEAREST;
  static const FloatingPointConfiguration ROUND_TO_ZERO = Device_FloatingPointConfiguration_ROUND_TO_ZERO;
  static const FloatingPointConfiguration ROUND_TO_INFINITY = Device_FloatingPointConfiguration_ROUND_TO_INFINITY;
  static const FloatingPointConfiguration ROUND_TO_FUSED_MULTIPLY_ADD = Device_FloatingPointConfiguration_ROUND_TO_FUSED_MULTIPLY_ADD;
  static const FloatingPointConfiguration ROUND_TO_SOFTWARE_FLOAT = Device_FloatingPointConfiguration_ROUND_TO_SOFTWARE_FLOAT;
  static const FloatingPointConfiguration CORRECTLY_ROUNDED_DIVIDE_SQRT = Device_FloatingPointConfiguration_CORRECTLY_ROUNDED_DIVIDE_SQRT;
  static inline bool FloatingPointConfiguration_IsValid(int value) {
    return Device_FloatingPointConfiguration_IsValid(value);
  }
  static const FloatingPointConfiguration FloatingPointConfiguration_MIN =
    Device_FloatingPointConfiguration_FloatingPointConfiguration_MIN;
  static const FloatingPointConfiguration FloatingPointConfiguration_MAX =
    Device_FloatingPointConfiguration_FloatingPointConfiguration_MAX;
  static const int FloatingPointConfiguration_ARRAYSIZE =
    Device_FloatingPointConfiguration_FloatingPointConfiguration_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FloatingPointConfiguration_descriptor() {
    return Device_FloatingPointConfiguration_descriptor();
  }
  static inline const ::std::string& FloatingPointConfiguration_Name(FloatingPointConfiguration value) {
    return Device_FloatingPointConfiguration_Name(value);
  }
  static inline bool FloatingPointConfiguration_Parse(const ::std::string& name,
      FloatingPointConfiguration* value) {
    return Device_FloatingPointConfiguration_Parse(name, value);
  }

  typedef Device_MemoryCacheType MemoryCacheType;
  static const MemoryCacheType MEMORY_CACHE_NONE = Device_MemoryCacheType_MEMORY_CACHE_NONE;
  static const MemoryCacheType READ_ONLY = Device_MemoryCacheType_READ_ONLY;
  static const MemoryCacheType READ_WRITE = Device_MemoryCacheType_READ_WRITE;
  static inline bool MemoryCacheType_IsValid(int value) {
    return Device_MemoryCacheType_IsValid(value);
  }
  static const MemoryCacheType MemoryCacheType_MIN =
    Device_MemoryCacheType_MemoryCacheType_MIN;
  static const MemoryCacheType MemoryCacheType_MAX =
    Device_MemoryCacheType_MemoryCacheType_MAX;
  static const int MemoryCacheType_ARRAYSIZE =
    Device_MemoryCacheType_MemoryCacheType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MemoryCacheType_descriptor() {
    return Device_MemoryCacheType_descriptor();
  }
  static inline const ::std::string& MemoryCacheType_Name(MemoryCacheType value) {
    return Device_MemoryCacheType_Name(value);
  }
  static inline bool MemoryCacheType_Parse(const ::std::string& name,
      MemoryCacheType* value) {
    return Device_MemoryCacheType_Parse(name, value);
  }

  typedef Device_LocalMemoryType LocalMemoryType;
  static const LocalMemoryType LOCAL_MEMORY_NONE = Device_LocalMemoryType_LOCAL_MEMORY_NONE;
  static const LocalMemoryType LOCAL = Device_LocalMemoryType_LOCAL;
  static const LocalMemoryType GLOBAL = Device_LocalMemoryType_GLOBAL;
  static inline bool LocalMemoryType_IsValid(int value) {
    return Device_LocalMemoryType_IsValid(value);
  }
  static const LocalMemoryType LocalMemoryType_MIN =
    Device_LocalMemoryType_LocalMemoryType_MIN;
  static const LocalMemoryType LocalMemoryType_MAX =
    Device_LocalMemoryType_LocalMemoryType_MAX;
  static const int LocalMemoryType_ARRAYSIZE =
    Device_LocalMemoryType_LocalMemoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LocalMemoryType_descriptor() {
    return Device_LocalMemoryType_descriptor();
  }
  static inline const ::std::string& LocalMemoryType_Name(LocalMemoryType value) {
    return Device_LocalMemoryType_Name(value);
  }
  static inline bool LocalMemoryType_Parse(const ::std::string& name,
      LocalMemoryType* value) {
    return Device_LocalMemoryType_Parse(name, value);
  }

  typedef Device_ExecutionCapability ExecutionCapability;
  static const ExecutionCapability EXECUTION_CAPABILITY_NONE = Device_ExecutionCapability_EXECUTION_CAPABILITY_NONE;
  static const ExecutionCapability KERNEL = Device_ExecutionCapability_KERNEL;
  static const ExecutionCapability NATIVE_KERNEL = Device_ExecutionCapability_NATIVE_KERNEL;
  static inline bool ExecutionCapability_IsValid(int value) {
    return Device_ExecutionCapability_IsValid(value);
  }
  static const ExecutionCapability ExecutionCapability_MIN =
    Device_ExecutionCapability_ExecutionCapability_MIN;
  static const ExecutionCapability ExecutionCapability_MAX =
    Device_ExecutionCapability_ExecutionCapability_MAX;
  static const int ExecutionCapability_ARRAYSIZE =
    Device_ExecutionCapability_ExecutionCapability_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ExecutionCapability_descriptor() {
    return Device_ExecutionCapability_descriptor();
  }
  static inline const ::std::string& ExecutionCapability_Name(ExecutionCapability value) {
    return Device_ExecutionCapability_Name(value);
  }
  static inline bool ExecutionCapability_Parse(const ::std::string& name,
      ExecutionCapability* value) {
    return Device_ExecutionCapability_Parse(name, value);
  }

  typedef Device_QueueProperty QueueProperty;
  static const QueueProperty QUEUE_PROPERTY_NONE = Device_QueueProperty_QUEUE_PROPERTY_NONE;
  static const QueueProperty OUT_OF_ORDER_EXECUTION_MODE_ENABLE = Device_QueueProperty_OUT_OF_ORDER_EXECUTION_MODE_ENABLE;
  static const QueueProperty PROFILING_ENABLE = Device_QueueProperty_PROFILING_ENABLE;
  static inline bool QueueProperty_IsValid(int value) {
    return Device_QueueProperty_IsValid(value);
  }
  static const QueueProperty QueueProperty_MIN =
    Device_QueueProperty_QueueProperty_MIN;
  static const QueueProperty QueueProperty_MAX =
    Device_QueueProperty_QueueProperty_MAX;
  static const int QueueProperty_ARRAYSIZE =
    Device_QueueProperty_QueueProperty_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueueProperty_descriptor() {
    return Device_QueueProperty_descriptor();
  }
  static inline const ::std::string& QueueProperty_Name(QueueProperty value) {
    return Device_QueueProperty_Name(value);
  }
  static inline bool QueueProperty_Parse(const ::std::string& name,
      QueueProperty* value) {
    return Device_QueueProperty_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .sacred.proto.Device.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sacred::proto::Device_Type type() const;
  void set_type(::sacred::proto::Device_Type value);

  // optional uint32 vendor_identifier = 2;
  void clear_vendor_identifier();
  static const int kVendorIdentifierFieldNumber = 2;
  ::google::protobuf::uint32 vendor_identifier() const;
  void set_vendor_identifier(::google::protobuf::uint32 value);

  // optional uint32 maximum_compute_units = 3;
  void clear_maximum_compute_units();
  static const int kMaximumComputeUnitsFieldNumber = 3;
  ::google::protobuf::uint32 maximum_compute_units() const;
  void set_maximum_compute_units(::google::protobuf::uint32 value);

  // optional uint32 maximum_work_item_dimensions = 4;
  void clear_maximum_work_item_dimensions();
  static const int kMaximumWorkItemDimensionsFieldNumber = 4;
  ::google::protobuf::uint32 maximum_work_item_dimensions() const;
  void set_maximum_work_item_dimensions(::google::protobuf::uint32 value);

  // repeated uint64 maximum_work_item_sizes = 5;
  int maximum_work_item_sizes_size() const;
  void clear_maximum_work_item_sizes();
  static const int kMaximumWorkItemSizesFieldNumber = 5;
  ::google::protobuf::uint64 maximum_work_item_sizes(int index) const;
  void set_maximum_work_item_sizes(int index, ::google::protobuf::uint64 value);
  void add_maximum_work_item_sizes(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      maximum_work_item_sizes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_maximum_work_item_sizes();

  // optional uint64 maximum_work_group_size = 6;
  void clear_maximum_work_group_size();
  static const int kMaximumWorkGroupSizeFieldNumber = 6;
  ::google::protobuf::uint64 maximum_work_group_size() const;
  void set_maximum_work_group_size(::google::protobuf::uint64 value);

  // optional uint32 preferred_vector_width_character = 7;
  void clear_preferred_vector_width_character();
  static const int kPreferredVectorWidthCharacterFieldNumber = 7;
  ::google::protobuf::uint32 preferred_vector_width_character() const;
  void set_preferred_vector_width_character(::google::protobuf::uint32 value);

  // optional uint32 preferred_vector_width_short = 8;
  void clear_preferred_vector_width_short();
  static const int kPreferredVectorWidthShortFieldNumber = 8;
  ::google::protobuf::uint32 preferred_vector_width_short() const;
  void set_preferred_vector_width_short(::google::protobuf::uint32 value);

  // optional uint32 preferred_vector_width_integer = 9;
  void clear_preferred_vector_width_integer();
  static const int kPreferredVectorWidthIntegerFieldNumber = 9;
  ::google::protobuf::uint32 preferred_vector_width_integer() const;
  void set_preferred_vector_width_integer(::google::protobuf::uint32 value);

  // optional uint32 preferred_vector_width_long = 10;
  void clear_preferred_vector_width_long();
  static const int kPreferredVectorWidthLongFieldNumber = 10;
  ::google::protobuf::uint32 preferred_vector_width_long() const;
  void set_preferred_vector_width_long(::google::protobuf::uint32 value);

  // optional uint32 preferred_vector_width_float = 11;
  void clear_preferred_vector_width_float();
  static const int kPreferredVectorWidthFloatFieldNumber = 11;
  ::google::protobuf::uint32 preferred_vector_width_float() const;
  void set_preferred_vector_width_float(::google::protobuf::uint32 value);

  // optional uint32 preferred_vector_width_double = 12;
  void clear_preferred_vector_width_double();
  static const int kPreferredVectorWidthDoubleFieldNumber = 12;
  ::google::protobuf::uint32 preferred_vector_width_double() const;
  void set_preferred_vector_width_double(::google::protobuf::uint32 value);

  // optional uint32 preferred_vector_width_half = 13;
  void clear_preferred_vector_width_half();
  static const int kPreferredVectorWidthHalfFieldNumber = 13;
  ::google::protobuf::uint32 preferred_vector_width_half() const;
  void set_preferred_vector_width_half(::google::protobuf::uint32 value);

  // optional uint32 native_vector_width_character = 14;
  void clear_native_vector_width_character();
  static const int kNativeVectorWidthCharacterFieldNumber = 14;
  ::google::protobuf::uint32 native_vector_width_character() const;
  void set_native_vector_width_character(::google::protobuf::uint32 value);

  // optional uint32 native_vector_width_short = 15;
  void clear_native_vector_width_short();
  static const int kNativeVectorWidthShortFieldNumber = 15;
  ::google::protobuf::uint32 native_vector_width_short() const;
  void set_native_vector_width_short(::google::protobuf::uint32 value);

  // optional uint32 native_vector_width_integer = 16;
  void clear_native_vector_width_integer();
  static const int kNativeVectorWidthIntegerFieldNumber = 16;
  ::google::protobuf::uint32 native_vector_width_integer() const;
  void set_native_vector_width_integer(::google::protobuf::uint32 value);

  // optional uint32 native_vector_width_long = 17;
  void clear_native_vector_width_long();
  static const int kNativeVectorWidthLongFieldNumber = 17;
  ::google::protobuf::uint32 native_vector_width_long() const;
  void set_native_vector_width_long(::google::protobuf::uint32 value);

  // optional uint32 native_vector_width_float = 18;
  void clear_native_vector_width_float();
  static const int kNativeVectorWidthFloatFieldNumber = 18;
  ::google::protobuf::uint32 native_vector_width_float() const;
  void set_native_vector_width_float(::google::protobuf::uint32 value);

  // optional uint32 native_vector_width_double = 19;
  void clear_native_vector_width_double();
  static const int kNativeVectorWidthDoubleFieldNumber = 19;
  ::google::protobuf::uint32 native_vector_width_double() const;
  void set_native_vector_width_double(::google::protobuf::uint32 value);

  // optional uint32 native_vector_width_half = 20;
  void clear_native_vector_width_half();
  static const int kNativeVectorWidthHalfFieldNumber = 20;
  ::google::protobuf::uint32 native_vector_width_half() const;
  void set_native_vector_width_half(::google::protobuf::uint32 value);

  // optional uint32 address_bits = 21;
  void clear_address_bits();
  static const int kAddressBitsFieldNumber = 21;
  ::google::protobuf::uint32 address_bits() const;
  void set_address_bits(::google::protobuf::uint32 value);

  // optional uint64 maximum_memory_allocation_size = 22;
  void clear_maximum_memory_allocation_size();
  static const int kMaximumMemoryAllocationSizeFieldNumber = 22;
  ::google::protobuf::uint64 maximum_memory_allocation_size() const;
  void set_maximum_memory_allocation_size(::google::protobuf::uint64 value);

  // optional bool image_support = 23;
  void clear_image_support();
  static const int kImageSupportFieldNumber = 23;
  bool image_support() const;
  void set_image_support(bool value);

  // optional uint32 maximum_read_image_arguments = 24;
  void clear_maximum_read_image_arguments();
  static const int kMaximumReadImageArgumentsFieldNumber = 24;
  ::google::protobuf::uint32 maximum_read_image_arguments() const;
  void set_maximum_read_image_arguments(::google::protobuf::uint32 value);

  // optional uint32 maximum_write_image_arguments = 25;
  void clear_maximum_write_image_arguments();
  static const int kMaximumWriteImageArgumentsFieldNumber = 25;
  ::google::protobuf::uint32 maximum_write_image_arguments() const;
  void set_maximum_write_image_arguments(::google::protobuf::uint32 value);

  // optional uint64 image2d_maximum_width = 26;
  void clear_image2d_maximum_width();
  static const int kImage2DMaximumWidthFieldNumber = 26;
  ::google::protobuf::uint64 image2d_maximum_width() const;
  void set_image2d_maximum_width(::google::protobuf::uint64 value);

  // optional uint64 image2d_maximum_height = 27;
  void clear_image2d_maximum_height();
  static const int kImage2DMaximumHeightFieldNumber = 27;
  ::google::protobuf::uint64 image2d_maximum_height() const;
  void set_image2d_maximum_height(::google::protobuf::uint64 value);

  // optional uint64 image3d_maximum_width = 28;
  void clear_image3d_maximum_width();
  static const int kImage3DMaximumWidthFieldNumber = 28;
  ::google::protobuf::uint64 image3d_maximum_width() const;
  void set_image3d_maximum_width(::google::protobuf::uint64 value);

  // optional uint64 image3d_maximum_height = 29;
  void clear_image3d_maximum_height();
  static const int kImage3DMaximumHeightFieldNumber = 29;
  ::google::protobuf::uint64 image3d_maximum_height() const;
  void set_image3d_maximum_height(::google::protobuf::uint64 value);

  // optional uint64 image3d_maximum_depth = 30;
  void clear_image3d_maximum_depth();
  static const int kImage3DMaximumDepthFieldNumber = 30;
  ::google::protobuf::uint64 image3d_maximum_depth() const;
  void set_image3d_maximum_depth(::google::protobuf::uint64 value);

  // optional uint32 maximum_samplers = 31;
  void clear_maximum_samplers();
  static const int kMaximumSamplersFieldNumber = 31;
  ::google::protobuf::uint32 maximum_samplers() const;
  void set_maximum_samplers(::google::protobuf::uint32 value);

  // optional uint64 maximum_parameter_size = 32;
  void clear_maximum_parameter_size();
  static const int kMaximumParameterSizeFieldNumber = 32;
  ::google::protobuf::uint64 maximum_parameter_size() const;
  void set_maximum_parameter_size(::google::protobuf::uint64 value);

  // optional uint32 memory_base_address_alignment = 33;
  void clear_memory_base_address_alignment();
  static const int kMemoryBaseAddressAlignmentFieldNumber = 33;
  ::google::protobuf::uint32 memory_base_address_alignment() const;
  void set_memory_base_address_alignment(::google::protobuf::uint32 value);

  // optional uint32 minimum_data_type_alignment_size = 34;
  void clear_minimum_data_type_alignment_size();
  static const int kMinimumDataTypeAlignmentSizeFieldNumber = 34;
  ::google::protobuf::uint32 minimum_data_type_alignment_size() const;
  void set_minimum_data_type_alignment_size(::google::protobuf::uint32 value);

  // repeated .sacred.proto.Device.FloatingPointConfiguration single_floating_point_configuration = 35;
  int single_floating_point_configuration_size() const;
  void clear_single_floating_point_configuration();
  static const int kSingleFloatingPointConfigurationFieldNumber = 35;
  ::sacred::proto::Device_FloatingPointConfiguration single_floating_point_configuration(int index) const;
  void set_single_floating_point_configuration(int index, ::sacred::proto::Device_FloatingPointConfiguration value);
  void add_single_floating_point_configuration(::sacred::proto::Device_FloatingPointConfiguration value);
  const ::google::protobuf::RepeatedField<int>& single_floating_point_configuration() const;
  ::google::protobuf::RepeatedField<int>* mutable_single_floating_point_configuration();

  // optional .sacred.proto.Device.MemoryCacheType global_memory_cache_type = 36;
  void clear_global_memory_cache_type();
  static const int kGlobalMemoryCacheTypeFieldNumber = 36;
  ::sacred::proto::Device_MemoryCacheType global_memory_cache_type() const;
  void set_global_memory_cache_type(::sacred::proto::Device_MemoryCacheType value);

  // optional uint32 global_memory_cacheline_size = 37;
  void clear_global_memory_cacheline_size();
  static const int kGlobalMemoryCachelineSizeFieldNumber = 37;
  ::google::protobuf::uint32 global_memory_cacheline_size() const;
  void set_global_memory_cacheline_size(::google::protobuf::uint32 value);

  // optional uint64 global_memory_cache_size = 38;
  void clear_global_memory_cache_size();
  static const int kGlobalMemoryCacheSizeFieldNumber = 38;
  ::google::protobuf::uint64 global_memory_cache_size() const;
  void set_global_memory_cache_size(::google::protobuf::uint64 value);

  // optional uint64 global_memory_size = 39;
  void clear_global_memory_size();
  static const int kGlobalMemorySizeFieldNumber = 39;
  ::google::protobuf::uint64 global_memory_size() const;
  void set_global_memory_size(::google::protobuf::uint64 value);

  // optional uint64 maximum_constant_buffer_size = 40;
  void clear_maximum_constant_buffer_size();
  static const int kMaximumConstantBufferSizeFieldNumber = 40;
  ::google::protobuf::uint64 maximum_constant_buffer_size() const;
  void set_maximum_constant_buffer_size(::google::protobuf::uint64 value);

  // optional uint32 maximum_constant_arguments = 41;
  void clear_maximum_constant_arguments();
  static const int kMaximumConstantArgumentsFieldNumber = 41;
  ::google::protobuf::uint32 maximum_constant_arguments() const;
  void set_maximum_constant_arguments(::google::protobuf::uint32 value);

  // optional .sacred.proto.Device.LocalMemoryType local_memory_type = 42;
  void clear_local_memory_type();
  static const int kLocalMemoryTypeFieldNumber = 42;
  ::sacred::proto::Device_LocalMemoryType local_memory_type() const;
  void set_local_memory_type(::sacred::proto::Device_LocalMemoryType value);

  // optional uint64 local_memory_size = 43;
  void clear_local_memory_size();
  static const int kLocalMemorySizeFieldNumber = 43;
  ::google::protobuf::uint64 local_memory_size() const;
  void set_local_memory_size(::google::protobuf::uint64 value);

  // optional bool error_correction_support = 44;
  void clear_error_correction_support();
  static const int kErrorCorrectionSupportFieldNumber = 44;
  bool error_correction_support() const;
  void set_error_correction_support(bool value);

  // optional bool host_unified_memory = 45;
  void clear_host_unified_memory();
  static const int kHostUnifiedMemoryFieldNumber = 45;
  bool host_unified_memory() const;
  void set_host_unified_memory(bool value);

  // optional uint64 profiling_timer_resolution = 46;
  void clear_profiling_timer_resolution();
  static const int kProfilingTimerResolutionFieldNumber = 46;
  ::google::protobuf::uint64 profiling_timer_resolution() const;
  void set_profiling_timer_resolution(::google::protobuf::uint64 value);

  // optional bool endian_little = 47;
  void clear_endian_little();
  static const int kEndianLittleFieldNumber = 47;
  bool endian_little() const;
  void set_endian_little(bool value);

  // optional bool available = 48;
  void clear_available();
  static const int kAvailableFieldNumber = 48;
  bool available() const;
  void set_available(bool value);

  // optional bool compiler_available = 49;
  void clear_compiler_available();
  static const int kCompilerAvailableFieldNumber = 49;
  bool compiler_available() const;
  void set_compiler_available(bool value);

  // repeated .sacred.proto.Device.ExecutionCapability execution_capabilities = 50;
  int execution_capabilities_size() const;
  void clear_execution_capabilities();
  static const int kExecutionCapabilitiesFieldNumber = 50;
  ::sacred::proto::Device_ExecutionCapability execution_capabilities(int index) const;
  void set_execution_capabilities(int index, ::sacred::proto::Device_ExecutionCapability value);
  void add_execution_capabilities(::sacred::proto::Device_ExecutionCapability value);
  const ::google::protobuf::RepeatedField<int>& execution_capabilities() const;
  ::google::protobuf::RepeatedField<int>* mutable_execution_capabilities();

  // repeated .sacred.proto.Device.QueueProperty queue_properties = 51;
  int queue_properties_size() const;
  void clear_queue_properties();
  static const int kQueuePropertiesFieldNumber = 51;
  ::sacred::proto::Device_QueueProperty queue_properties(int index) const;
  void set_queue_properties(int index, ::sacred::proto::Device_QueueProperty value);
  void add_queue_properties(::sacred::proto::Device_QueueProperty value);
  const ::google::protobuf::RepeatedField<int>& queue_properties() const;
  ::google::protobuf::RepeatedField<int>* mutable_queue_properties();

  // optional string name = 52;
  void clear_name();
  static const int kNameFieldNumber = 52;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string vendor = 53;
  void clear_vendor();
  static const int kVendorFieldNumber = 53;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // optional string driver_version = 54;
  void clear_driver_version();
  static const int kDriverVersionFieldNumber = 54;
  const ::std::string& driver_version() const;
  void set_driver_version(const ::std::string& value);
  void set_driver_version(const char* value);
  void set_driver_version(const char* value, size_t size);
  ::std::string* mutable_driver_version();
  ::std::string* release_driver_version();
  void set_allocated_driver_version(::std::string* driver_version);

  // optional string profile = 55;
  void clear_profile();
  static const int kProfileFieldNumber = 55;
  const ::std::string& profile() const;
  void set_profile(const ::std::string& value);
  void set_profile(const char* value);
  void set_profile(const char* value, size_t size);
  ::std::string* mutable_profile();
  ::std::string* release_profile();
  void set_allocated_profile(::std::string* profile);

  // optional string version = 56;
  void clear_version();
  static const int kVersionFieldNumber = 56;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string opencl_c_version = 57;
  void clear_opencl_c_version();
  static const int kOpenclCVersionFieldNumber = 57;
  const ::std::string& opencl_c_version() const;
  void set_opencl_c_version(const ::std::string& value);
  void set_opencl_c_version(const char* value);
  void set_opencl_c_version(const char* value, size_t size);
  ::std::string* mutable_opencl_c_version();
  ::std::string* release_opencl_c_version();
  void set_allocated_opencl_c_version(::std::string* opencl_c_version);

  // optional string extensions = 58;
  void clear_extensions();
  static const int kExtensionsFieldNumber = 58;
  const ::std::string& extensions() const;
  void set_extensions(const ::std::string& value);
  void set_extensions(const char* value);
  void set_extensions(const char* value, size_t size);
  ::std::string* mutable_extensions();
  ::std::string* release_extensions();
  void set_allocated_extensions(::std::string* extensions);

  // @@protoc_insertion_point(class_scope:sacred.proto.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  ::google::protobuf::uint32 vendor_identifier_;
  ::google::protobuf::uint32 maximum_compute_units_;
  ::google::protobuf::uint32 maximum_work_item_dimensions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > maximum_work_item_sizes_;
  mutable int _maximum_work_item_sizes_cached_byte_size_;
  ::google::protobuf::uint64 maximum_work_group_size_;
  ::google::protobuf::uint32 preferred_vector_width_character_;
  ::google::protobuf::uint32 preferred_vector_width_short_;
  ::google::protobuf::uint32 preferred_vector_width_integer_;
  ::google::protobuf::uint32 preferred_vector_width_long_;
  ::google::protobuf::uint32 preferred_vector_width_float_;
  ::google::protobuf::uint32 preferred_vector_width_double_;
  ::google::protobuf::uint32 preferred_vector_width_half_;
  ::google::protobuf::uint32 native_vector_width_character_;
  ::google::protobuf::uint32 native_vector_width_short_;
  ::google::protobuf::uint32 native_vector_width_integer_;
  ::google::protobuf::uint32 native_vector_width_long_;
  ::google::protobuf::uint32 native_vector_width_float_;
  ::google::protobuf::uint32 native_vector_width_double_;
  ::google::protobuf::uint32 native_vector_width_half_;
  ::google::protobuf::uint64 maximum_memory_allocation_size_;
  ::google::protobuf::uint32 address_bits_;
  ::google::protobuf::uint32 maximum_read_image_arguments_;
  ::google::protobuf::uint64 image2d_maximum_width_;
  ::google::protobuf::uint64 image2d_maximum_height_;
  ::google::protobuf::uint64 image3d_maximum_width_;
  ::google::protobuf::uint32 maximum_write_image_arguments_;
  ::google::protobuf::uint32 maximum_samplers_;
  ::google::protobuf::uint64 image3d_maximum_height_;
  ::google::protobuf::uint64 image3d_maximum_depth_;
  ::google::protobuf::uint64 maximum_parameter_size_;
  ::google::protobuf::uint32 memory_base_address_alignment_;
  ::google::protobuf::uint32 minimum_data_type_alignment_size_;
  ::google::protobuf::RepeatedField<int> single_floating_point_configuration_;
  mutable int _single_floating_point_configuration_cached_byte_size_;
  int global_memory_cache_type_;
  ::google::protobuf::uint32 global_memory_cacheline_size_;
  ::google::protobuf::uint64 global_memory_cache_size_;
  ::google::protobuf::uint64 global_memory_size_;
  ::google::protobuf::uint64 maximum_constant_buffer_size_;
  bool image_support_;
  bool error_correction_support_;
  bool host_unified_memory_;
  bool endian_little_;
  ::google::protobuf::uint32 maximum_constant_arguments_;
  ::google::protobuf::uint64 local_memory_size_;
  ::google::protobuf::uint64 profiling_timer_resolution_;
  int local_memory_type_;
  bool available_;
  bool compiler_available_;
  ::google::protobuf::RepeatedField<int> execution_capabilities_;
  mutable int _execution_capabilities_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> queue_properties_;
  mutable int _queue_properties_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::internal::ArenaStringPtr driver_version_;
  ::google::protobuf::internal::ArenaStringPtr profile_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr opencl_c_version_;
  ::google::protobuf::internal::ArenaStringPtr extensions_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fopencl_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fopencl_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fopencl_2eproto();

  void InitAsDefaultInstance();
  static Device* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenCl

// repeated .sacred.proto.Platform platform = 1;
inline int OpenCl::platform_size() const {
  return platform_.size();
}
inline void OpenCl::clear_platform() {
  platform_.Clear();
}
inline const ::sacred::proto::Platform& OpenCl::platform(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.OpenCl.platform)
  return platform_.Get(index);
}
inline ::sacred::proto::Platform* OpenCl::mutable_platform(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.OpenCl.platform)
  return platform_.Mutable(index);
}
inline ::sacred::proto::Platform* OpenCl::add_platform() {
  // @@protoc_insertion_point(field_add:sacred.proto.OpenCl.platform)
  return platform_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sacred::proto::Platform >*
OpenCl::mutable_platform() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.OpenCl.platform)
  return &platform_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Platform >&
OpenCl::platform() const {
  // @@protoc_insertion_point(field_list:sacred.proto.OpenCl.platform)
  return platform_;
}

// -------------------------------------------------------------------

// Platform

// optional string profile = 1;
inline void Platform::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Platform::profile() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.profile)
  return profile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.profile)
}
inline void Platform::set_profile(const char* value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.profile)
}
inline void Platform::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.profile)
}
inline ::std::string* Platform::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Platform::release_profile() {
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.profile)
}

// optional string version = 2;
inline void Platform::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Platform::version() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.version)
}
inline void Platform::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.version)
}
inline void Platform::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.version)
}
inline ::std::string* Platform::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Platform::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.version)
}

// optional string name = 3;
inline void Platform::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Platform::name() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.name)
}
inline void Platform::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.name)
}
inline void Platform::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.name)
}
inline ::std::string* Platform::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Platform::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.name)
}

// optional string vendor = 4;
inline void Platform::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Platform::vendor() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.vendor)
}
inline void Platform::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.vendor)
}
inline void Platform::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.vendor)
}
inline ::std::string* Platform::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Platform::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.vendor)
}

// optional string extensions = 5;
inline void Platform::clear_extensions() {
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Platform::extensions() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.extensions)
  return extensions_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_extensions(const ::std::string& value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Platform.extensions)
}
inline void Platform::set_extensions(const char* value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Platform.extensions)
}
inline void Platform::set_extensions(const char* value, size_t size) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Platform.extensions)
}
inline ::std::string* Platform::mutable_extensions() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.extensions)
  return extensions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Platform::release_extensions() {
  
  return extensions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform::set_allocated_extensions(::std::string* extensions) {
  if (extensions != NULL) {
    
  } else {
    
  }
  extensions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extensions);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Platform.extensions)
}

// repeated .sacred.proto.Device device = 6;
inline int Platform::device_size() const {
  return device_.size();
}
inline void Platform::clear_device() {
  device_.Clear();
}
inline const ::sacred::proto::Device& Platform::device(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Platform.device)
  return device_.Get(index);
}
inline ::sacred::proto::Device* Platform::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.Platform.device)
  return device_.Mutable(index);
}
inline ::sacred::proto::Device* Platform::add_device() {
  // @@protoc_insertion_point(field_add:sacred.proto.Platform.device)
  return device_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sacred::proto::Device >*
Platform::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Platform.device)
  return &device_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Device >&
Platform::device() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Platform.device)
  return device_;
}

// -------------------------------------------------------------------

// Device

// optional .sacred.proto.Device.Type type = 1;
inline void Device::clear_type() {
  type_ = 0;
}
inline ::sacred::proto::Device_Type Device::type() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.type)
  return static_cast< ::sacred::proto::Device_Type >(type_);
}
inline void Device::set_type(::sacred::proto::Device_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.type)
}

// optional uint32 vendor_identifier = 2;
inline void Device::clear_vendor_identifier() {
  vendor_identifier_ = 0u;
}
inline ::google::protobuf::uint32 Device::vendor_identifier() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.vendor_identifier)
  return vendor_identifier_;
}
inline void Device::set_vendor_identifier(::google::protobuf::uint32 value) {
  
  vendor_identifier_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.vendor_identifier)
}

// optional uint32 maximum_compute_units = 3;
inline void Device::clear_maximum_compute_units() {
  maximum_compute_units_ = 0u;
}
inline ::google::protobuf::uint32 Device::maximum_compute_units() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_compute_units)
  return maximum_compute_units_;
}
inline void Device::set_maximum_compute_units(::google::protobuf::uint32 value) {
  
  maximum_compute_units_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_compute_units)
}

// optional uint32 maximum_work_item_dimensions = 4;
inline void Device::clear_maximum_work_item_dimensions() {
  maximum_work_item_dimensions_ = 0u;
}
inline ::google::protobuf::uint32 Device::maximum_work_item_dimensions() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_work_item_dimensions)
  return maximum_work_item_dimensions_;
}
inline void Device::set_maximum_work_item_dimensions(::google::protobuf::uint32 value) {
  
  maximum_work_item_dimensions_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_work_item_dimensions)
}

// repeated uint64 maximum_work_item_sizes = 5;
inline int Device::maximum_work_item_sizes_size() const {
  return maximum_work_item_sizes_.size();
}
inline void Device::clear_maximum_work_item_sizes() {
  maximum_work_item_sizes_.Clear();
}
inline ::google::protobuf::uint64 Device::maximum_work_item_sizes(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_work_item_sizes)
  return maximum_work_item_sizes_.Get(index);
}
inline void Device::set_maximum_work_item_sizes(int index, ::google::protobuf::uint64 value) {
  maximum_work_item_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_work_item_sizes)
}
inline void Device::add_maximum_work_item_sizes(::google::protobuf::uint64 value) {
  maximum_work_item_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:sacred.proto.Device.maximum_work_item_sizes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Device::maximum_work_item_sizes() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Device.maximum_work_item_sizes)
  return maximum_work_item_sizes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Device::mutable_maximum_work_item_sizes() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Device.maximum_work_item_sizes)
  return &maximum_work_item_sizes_;
}

// optional uint64 maximum_work_group_size = 6;
inline void Device::clear_maximum_work_group_size() {
  maximum_work_group_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::maximum_work_group_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_work_group_size)
  return maximum_work_group_size_;
}
inline void Device::set_maximum_work_group_size(::google::protobuf::uint64 value) {
  
  maximum_work_group_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_work_group_size)
}

// optional uint32 preferred_vector_width_character = 7;
inline void Device::clear_preferred_vector_width_character() {
  preferred_vector_width_character_ = 0u;
}
inline ::google::protobuf::uint32 Device::preferred_vector_width_character() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_character)
  return preferred_vector_width_character_;
}
inline void Device::set_preferred_vector_width_character(::google::protobuf::uint32 value) {
  
  preferred_vector_width_character_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_character)
}

// optional uint32 preferred_vector_width_short = 8;
inline void Device::clear_preferred_vector_width_short() {
  preferred_vector_width_short_ = 0u;
}
inline ::google::protobuf::uint32 Device::preferred_vector_width_short() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_short)
  return preferred_vector_width_short_;
}
inline void Device::set_preferred_vector_width_short(::google::protobuf::uint32 value) {
  
  preferred_vector_width_short_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_short)
}

// optional uint32 preferred_vector_width_integer = 9;
inline void Device::clear_preferred_vector_width_integer() {
  preferred_vector_width_integer_ = 0u;
}
inline ::google::protobuf::uint32 Device::preferred_vector_width_integer() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_integer)
  return preferred_vector_width_integer_;
}
inline void Device::set_preferred_vector_width_integer(::google::protobuf::uint32 value) {
  
  preferred_vector_width_integer_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_integer)
}

// optional uint32 preferred_vector_width_long = 10;
inline void Device::clear_preferred_vector_width_long() {
  preferred_vector_width_long_ = 0u;
}
inline ::google::protobuf::uint32 Device::preferred_vector_width_long() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_long)
  return preferred_vector_width_long_;
}
inline void Device::set_preferred_vector_width_long(::google::protobuf::uint32 value) {
  
  preferred_vector_width_long_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_long)
}

// optional uint32 preferred_vector_width_float = 11;
inline void Device::clear_preferred_vector_width_float() {
  preferred_vector_width_float_ = 0u;
}
inline ::google::protobuf::uint32 Device::preferred_vector_width_float() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_float)
  return preferred_vector_width_float_;
}
inline void Device::set_preferred_vector_width_float(::google::protobuf::uint32 value) {
  
  preferred_vector_width_float_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_float)
}

// optional uint32 preferred_vector_width_double = 12;
inline void Device::clear_preferred_vector_width_double() {
  preferred_vector_width_double_ = 0u;
}
inline ::google::protobuf::uint32 Device::preferred_vector_width_double() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_double)
  return preferred_vector_width_double_;
}
inline void Device::set_preferred_vector_width_double(::google::protobuf::uint32 value) {
  
  preferred_vector_width_double_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_double)
}

// optional uint32 preferred_vector_width_half = 13;
inline void Device::clear_preferred_vector_width_half() {
  preferred_vector_width_half_ = 0u;
}
inline ::google::protobuf::uint32 Device::preferred_vector_width_half() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.preferred_vector_width_half)
  return preferred_vector_width_half_;
}
inline void Device::set_preferred_vector_width_half(::google::protobuf::uint32 value) {
  
  preferred_vector_width_half_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.preferred_vector_width_half)
}

// optional uint32 native_vector_width_character = 14;
inline void Device::clear_native_vector_width_character() {
  native_vector_width_character_ = 0u;
}
inline ::google::protobuf::uint32 Device::native_vector_width_character() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_character)
  return native_vector_width_character_;
}
inline void Device::set_native_vector_width_character(::google::protobuf::uint32 value) {
  
  native_vector_width_character_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_character)
}

// optional uint32 native_vector_width_short = 15;
inline void Device::clear_native_vector_width_short() {
  native_vector_width_short_ = 0u;
}
inline ::google::protobuf::uint32 Device::native_vector_width_short() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_short)
  return native_vector_width_short_;
}
inline void Device::set_native_vector_width_short(::google::protobuf::uint32 value) {
  
  native_vector_width_short_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_short)
}

// optional uint32 native_vector_width_integer = 16;
inline void Device::clear_native_vector_width_integer() {
  native_vector_width_integer_ = 0u;
}
inline ::google::protobuf::uint32 Device::native_vector_width_integer() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_integer)
  return native_vector_width_integer_;
}
inline void Device::set_native_vector_width_integer(::google::protobuf::uint32 value) {
  
  native_vector_width_integer_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_integer)
}

// optional uint32 native_vector_width_long = 17;
inline void Device::clear_native_vector_width_long() {
  native_vector_width_long_ = 0u;
}
inline ::google::protobuf::uint32 Device::native_vector_width_long() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_long)
  return native_vector_width_long_;
}
inline void Device::set_native_vector_width_long(::google::protobuf::uint32 value) {
  
  native_vector_width_long_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_long)
}

// optional uint32 native_vector_width_float = 18;
inline void Device::clear_native_vector_width_float() {
  native_vector_width_float_ = 0u;
}
inline ::google::protobuf::uint32 Device::native_vector_width_float() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_float)
  return native_vector_width_float_;
}
inline void Device::set_native_vector_width_float(::google::protobuf::uint32 value) {
  
  native_vector_width_float_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_float)
}

// optional uint32 native_vector_width_double = 19;
inline void Device::clear_native_vector_width_double() {
  native_vector_width_double_ = 0u;
}
inline ::google::protobuf::uint32 Device::native_vector_width_double() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_double)
  return native_vector_width_double_;
}
inline void Device::set_native_vector_width_double(::google::protobuf::uint32 value) {
  
  native_vector_width_double_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_double)
}

// optional uint32 native_vector_width_half = 20;
inline void Device::clear_native_vector_width_half() {
  native_vector_width_half_ = 0u;
}
inline ::google::protobuf::uint32 Device::native_vector_width_half() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.native_vector_width_half)
  return native_vector_width_half_;
}
inline void Device::set_native_vector_width_half(::google::protobuf::uint32 value) {
  
  native_vector_width_half_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.native_vector_width_half)
}

// optional uint32 address_bits = 21;
inline void Device::clear_address_bits() {
  address_bits_ = 0u;
}
inline ::google::protobuf::uint32 Device::address_bits() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.address_bits)
  return address_bits_;
}
inline void Device::set_address_bits(::google::protobuf::uint32 value) {
  
  address_bits_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.address_bits)
}

// optional uint64 maximum_memory_allocation_size = 22;
inline void Device::clear_maximum_memory_allocation_size() {
  maximum_memory_allocation_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::maximum_memory_allocation_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_memory_allocation_size)
  return maximum_memory_allocation_size_;
}
inline void Device::set_maximum_memory_allocation_size(::google::protobuf::uint64 value) {
  
  maximum_memory_allocation_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_memory_allocation_size)
}

// optional bool image_support = 23;
inline void Device::clear_image_support() {
  image_support_ = false;
}
inline bool Device::image_support() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image_support)
  return image_support_;
}
inline void Device::set_image_support(bool value) {
  
  image_support_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image_support)
}

// optional uint32 maximum_read_image_arguments = 24;
inline void Device::clear_maximum_read_image_arguments() {
  maximum_read_image_arguments_ = 0u;
}
inline ::google::protobuf::uint32 Device::maximum_read_image_arguments() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_read_image_arguments)
  return maximum_read_image_arguments_;
}
inline void Device::set_maximum_read_image_arguments(::google::protobuf::uint32 value) {
  
  maximum_read_image_arguments_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_read_image_arguments)
}

// optional uint32 maximum_write_image_arguments = 25;
inline void Device::clear_maximum_write_image_arguments() {
  maximum_write_image_arguments_ = 0u;
}
inline ::google::protobuf::uint32 Device::maximum_write_image_arguments() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_write_image_arguments)
  return maximum_write_image_arguments_;
}
inline void Device::set_maximum_write_image_arguments(::google::protobuf::uint32 value) {
  
  maximum_write_image_arguments_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_write_image_arguments)
}

// optional uint64 image2d_maximum_width = 26;
inline void Device::clear_image2d_maximum_width() {
  image2d_maximum_width_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::image2d_maximum_width() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image2d_maximum_width)
  return image2d_maximum_width_;
}
inline void Device::set_image2d_maximum_width(::google::protobuf::uint64 value) {
  
  image2d_maximum_width_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image2d_maximum_width)
}

// optional uint64 image2d_maximum_height = 27;
inline void Device::clear_image2d_maximum_height() {
  image2d_maximum_height_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::image2d_maximum_height() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image2d_maximum_height)
  return image2d_maximum_height_;
}
inline void Device::set_image2d_maximum_height(::google::protobuf::uint64 value) {
  
  image2d_maximum_height_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image2d_maximum_height)
}

// optional uint64 image3d_maximum_width = 28;
inline void Device::clear_image3d_maximum_width() {
  image3d_maximum_width_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::image3d_maximum_width() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image3d_maximum_width)
  return image3d_maximum_width_;
}
inline void Device::set_image3d_maximum_width(::google::protobuf::uint64 value) {
  
  image3d_maximum_width_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image3d_maximum_width)
}

// optional uint64 image3d_maximum_height = 29;
inline void Device::clear_image3d_maximum_height() {
  image3d_maximum_height_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::image3d_maximum_height() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image3d_maximum_height)
  return image3d_maximum_height_;
}
inline void Device::set_image3d_maximum_height(::google::protobuf::uint64 value) {
  
  image3d_maximum_height_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image3d_maximum_height)
}

// optional uint64 image3d_maximum_depth = 30;
inline void Device::clear_image3d_maximum_depth() {
  image3d_maximum_depth_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::image3d_maximum_depth() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.image3d_maximum_depth)
  return image3d_maximum_depth_;
}
inline void Device::set_image3d_maximum_depth(::google::protobuf::uint64 value) {
  
  image3d_maximum_depth_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.image3d_maximum_depth)
}

// optional uint32 maximum_samplers = 31;
inline void Device::clear_maximum_samplers() {
  maximum_samplers_ = 0u;
}
inline ::google::protobuf::uint32 Device::maximum_samplers() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_samplers)
  return maximum_samplers_;
}
inline void Device::set_maximum_samplers(::google::protobuf::uint32 value) {
  
  maximum_samplers_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_samplers)
}

// optional uint64 maximum_parameter_size = 32;
inline void Device::clear_maximum_parameter_size() {
  maximum_parameter_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::maximum_parameter_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_parameter_size)
  return maximum_parameter_size_;
}
inline void Device::set_maximum_parameter_size(::google::protobuf::uint64 value) {
  
  maximum_parameter_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_parameter_size)
}

// optional uint32 memory_base_address_alignment = 33;
inline void Device::clear_memory_base_address_alignment() {
  memory_base_address_alignment_ = 0u;
}
inline ::google::protobuf::uint32 Device::memory_base_address_alignment() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.memory_base_address_alignment)
  return memory_base_address_alignment_;
}
inline void Device::set_memory_base_address_alignment(::google::protobuf::uint32 value) {
  
  memory_base_address_alignment_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.memory_base_address_alignment)
}

// optional uint32 minimum_data_type_alignment_size = 34;
inline void Device::clear_minimum_data_type_alignment_size() {
  minimum_data_type_alignment_size_ = 0u;
}
inline ::google::protobuf::uint32 Device::minimum_data_type_alignment_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.minimum_data_type_alignment_size)
  return minimum_data_type_alignment_size_;
}
inline void Device::set_minimum_data_type_alignment_size(::google::protobuf::uint32 value) {
  
  minimum_data_type_alignment_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.minimum_data_type_alignment_size)
}

// repeated .sacred.proto.Device.FloatingPointConfiguration single_floating_point_configuration = 35;
inline int Device::single_floating_point_configuration_size() const {
  return single_floating_point_configuration_.size();
}
inline void Device::clear_single_floating_point_configuration() {
  single_floating_point_configuration_.Clear();
}
inline ::sacred::proto::Device_FloatingPointConfiguration Device::single_floating_point_configuration(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.single_floating_point_configuration)
  return static_cast< ::sacred::proto::Device_FloatingPointConfiguration >(single_floating_point_configuration_.Get(index));
}
inline void Device::set_single_floating_point_configuration(int index, ::sacred::proto::Device_FloatingPointConfiguration value) {
  single_floating_point_configuration_.Set(index, value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.single_floating_point_configuration)
}
inline void Device::add_single_floating_point_configuration(::sacred::proto::Device_FloatingPointConfiguration value) {
  single_floating_point_configuration_.Add(value);
  // @@protoc_insertion_point(field_add:sacred.proto.Device.single_floating_point_configuration)
}
inline const ::google::protobuf::RepeatedField<int>&
Device::single_floating_point_configuration() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Device.single_floating_point_configuration)
  return single_floating_point_configuration_;
}
inline ::google::protobuf::RepeatedField<int>*
Device::mutable_single_floating_point_configuration() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Device.single_floating_point_configuration)
  return &single_floating_point_configuration_;
}

// optional .sacred.proto.Device.MemoryCacheType global_memory_cache_type = 36;
inline void Device::clear_global_memory_cache_type() {
  global_memory_cache_type_ = 0;
}
inline ::sacred::proto::Device_MemoryCacheType Device::global_memory_cache_type() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.global_memory_cache_type)
  return static_cast< ::sacred::proto::Device_MemoryCacheType >(global_memory_cache_type_);
}
inline void Device::set_global_memory_cache_type(::sacred::proto::Device_MemoryCacheType value) {
  
  global_memory_cache_type_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.global_memory_cache_type)
}

// optional uint32 global_memory_cacheline_size = 37;
inline void Device::clear_global_memory_cacheline_size() {
  global_memory_cacheline_size_ = 0u;
}
inline ::google::protobuf::uint32 Device::global_memory_cacheline_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.global_memory_cacheline_size)
  return global_memory_cacheline_size_;
}
inline void Device::set_global_memory_cacheline_size(::google::protobuf::uint32 value) {
  
  global_memory_cacheline_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.global_memory_cacheline_size)
}

// optional uint64 global_memory_cache_size = 38;
inline void Device::clear_global_memory_cache_size() {
  global_memory_cache_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::global_memory_cache_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.global_memory_cache_size)
  return global_memory_cache_size_;
}
inline void Device::set_global_memory_cache_size(::google::protobuf::uint64 value) {
  
  global_memory_cache_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.global_memory_cache_size)
}

// optional uint64 global_memory_size = 39;
inline void Device::clear_global_memory_size() {
  global_memory_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::global_memory_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.global_memory_size)
  return global_memory_size_;
}
inline void Device::set_global_memory_size(::google::protobuf::uint64 value) {
  
  global_memory_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.global_memory_size)
}

// optional uint64 maximum_constant_buffer_size = 40;
inline void Device::clear_maximum_constant_buffer_size() {
  maximum_constant_buffer_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::maximum_constant_buffer_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_constant_buffer_size)
  return maximum_constant_buffer_size_;
}
inline void Device::set_maximum_constant_buffer_size(::google::protobuf::uint64 value) {
  
  maximum_constant_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_constant_buffer_size)
}

// optional uint32 maximum_constant_arguments = 41;
inline void Device::clear_maximum_constant_arguments() {
  maximum_constant_arguments_ = 0u;
}
inline ::google::protobuf::uint32 Device::maximum_constant_arguments() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.maximum_constant_arguments)
  return maximum_constant_arguments_;
}
inline void Device::set_maximum_constant_arguments(::google::protobuf::uint32 value) {
  
  maximum_constant_arguments_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.maximum_constant_arguments)
}

// optional .sacred.proto.Device.LocalMemoryType local_memory_type = 42;
inline void Device::clear_local_memory_type() {
  local_memory_type_ = 0;
}
inline ::sacred::proto::Device_LocalMemoryType Device::local_memory_type() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.local_memory_type)
  return static_cast< ::sacred::proto::Device_LocalMemoryType >(local_memory_type_);
}
inline void Device::set_local_memory_type(::sacred::proto::Device_LocalMemoryType value) {
  
  local_memory_type_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.local_memory_type)
}

// optional uint64 local_memory_size = 43;
inline void Device::clear_local_memory_size() {
  local_memory_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::local_memory_size() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.local_memory_size)
  return local_memory_size_;
}
inline void Device::set_local_memory_size(::google::protobuf::uint64 value) {
  
  local_memory_size_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.local_memory_size)
}

// optional bool error_correction_support = 44;
inline void Device::clear_error_correction_support() {
  error_correction_support_ = false;
}
inline bool Device::error_correction_support() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.error_correction_support)
  return error_correction_support_;
}
inline void Device::set_error_correction_support(bool value) {
  
  error_correction_support_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.error_correction_support)
}

// optional bool host_unified_memory = 45;
inline void Device::clear_host_unified_memory() {
  host_unified_memory_ = false;
}
inline bool Device::host_unified_memory() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.host_unified_memory)
  return host_unified_memory_;
}
inline void Device::set_host_unified_memory(bool value) {
  
  host_unified_memory_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.host_unified_memory)
}

// optional uint64 profiling_timer_resolution = 46;
inline void Device::clear_profiling_timer_resolution() {
  profiling_timer_resolution_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::profiling_timer_resolution() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.profiling_timer_resolution)
  return profiling_timer_resolution_;
}
inline void Device::set_profiling_timer_resolution(::google::protobuf::uint64 value) {
  
  profiling_timer_resolution_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.profiling_timer_resolution)
}

// optional bool endian_little = 47;
inline void Device::clear_endian_little() {
  endian_little_ = false;
}
inline bool Device::endian_little() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.endian_little)
  return endian_little_;
}
inline void Device::set_endian_little(bool value) {
  
  endian_little_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.endian_little)
}

// optional bool available = 48;
inline void Device::clear_available() {
  available_ = false;
}
inline bool Device::available() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.available)
  return available_;
}
inline void Device::set_available(bool value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.available)
}

// optional bool compiler_available = 49;
inline void Device::clear_compiler_available() {
  compiler_available_ = false;
}
inline bool Device::compiler_available() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.compiler_available)
  return compiler_available_;
}
inline void Device::set_compiler_available(bool value) {
  
  compiler_available_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Device.compiler_available)
}

// repeated .sacred.proto.Device.ExecutionCapability execution_capabilities = 50;
inline int Device::execution_capabilities_size() const {
  return execution_capabilities_.size();
}
inline void Device::clear_execution_capabilities() {
  execution_capabilities_.Clear();
}
inline ::sacred::proto::Device_ExecutionCapability Device::execution_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.execution_capabilities)
  return static_cast< ::sacred::proto::Device_ExecutionCapability >(execution_capabilities_.Get(index));
}
inline void Device::set_execution_capabilities(int index, ::sacred::proto::Device_ExecutionCapability value) {
  execution_capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.execution_capabilities)
}
inline void Device::add_execution_capabilities(::sacred::proto::Device_ExecutionCapability value) {
  execution_capabilities_.Add(value);
  // @@protoc_insertion_point(field_add:sacred.proto.Device.execution_capabilities)
}
inline const ::google::protobuf::RepeatedField<int>&
Device::execution_capabilities() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Device.execution_capabilities)
  return execution_capabilities_;
}
inline ::google::protobuf::RepeatedField<int>*
Device::mutable_execution_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Device.execution_capabilities)
  return &execution_capabilities_;
}

// repeated .sacred.proto.Device.QueueProperty queue_properties = 51;
inline int Device::queue_properties_size() const {
  return queue_properties_.size();
}
inline void Device::clear_queue_properties() {
  queue_properties_.Clear();
}
inline ::sacred::proto::Device_QueueProperty Device::queue_properties(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.queue_properties)
  return static_cast< ::sacred::proto::Device_QueueProperty >(queue_properties_.Get(index));
}
inline void Device::set_queue_properties(int index, ::sacred::proto::Device_QueueProperty value) {
  queue_properties_.Set(index, value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.queue_properties)
}
inline void Device::add_queue_properties(::sacred::proto::Device_QueueProperty value) {
  queue_properties_.Add(value);
  // @@protoc_insertion_point(field_add:sacred.proto.Device.queue_properties)
}
inline const ::google::protobuf::RepeatedField<int>&
Device::queue_properties() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Device.queue_properties)
  return queue_properties_;
}
inline ::google::protobuf::RepeatedField<int>*
Device::mutable_queue_properties() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Device.queue_properties)
  return &queue_properties_;
}

// optional string name = 52;
inline void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.name)
}
inline void Device::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.name)
}
inline void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.name)
}
inline ::std::string* Device::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.name)
}

// optional string vendor = 53;
inline void Device::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::vendor() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.vendor)
}
inline void Device::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.vendor)
}
inline void Device::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.vendor)
}
inline ::std::string* Device::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.vendor)
}

// optional string driver_version = 54;
inline void Device::clear_driver_version() {
  driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::driver_version() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.driver_version)
  return driver_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_driver_version(const ::std::string& value) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.driver_version)
}
inline void Device::set_driver_version(const char* value) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.driver_version)
}
inline void Device::set_driver_version(const char* value, size_t size) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.driver_version)
}
inline ::std::string* Device::mutable_driver_version() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.driver_version)
  return driver_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_driver_version() {
  
  return driver_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_driver_version(::std::string* driver_version) {
  if (driver_version != NULL) {
    
  } else {
    
  }
  driver_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_version);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.driver_version)
}

// optional string profile = 55;
inline void Device::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::profile() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.profile)
  return profile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.profile)
}
inline void Device::set_profile(const char* value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.profile)
}
inline void Device::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.profile)
}
inline ::std::string* Device::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_profile() {
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.profile)
}

// optional string version = 56;
inline void Device::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::version() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.version)
}
inline void Device::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.version)
}
inline void Device::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.version)
}
inline ::std::string* Device::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.version)
}

// optional string opencl_c_version = 57;
inline void Device::clear_opencl_c_version() {
  opencl_c_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::opencl_c_version() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.opencl_c_version)
  return opencl_c_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_opencl_c_version(const ::std::string& value) {
  
  opencl_c_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.opencl_c_version)
}
inline void Device::set_opencl_c_version(const char* value) {
  
  opencl_c_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.opencl_c_version)
}
inline void Device::set_opencl_c_version(const char* value, size_t size) {
  
  opencl_c_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.opencl_c_version)
}
inline ::std::string* Device::mutable_opencl_c_version() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.opencl_c_version)
  return opencl_c_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_opencl_c_version() {
  
  return opencl_c_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_opencl_c_version(::std::string* opencl_c_version) {
  if (opencl_c_version != NULL) {
    
  } else {
    
  }
  opencl_c_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opencl_c_version);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.opencl_c_version)
}

// optional string extensions = 58;
inline void Device::clear_extensions() {
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::extensions() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Device.extensions)
  return extensions_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_extensions(const ::std::string& value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Device.extensions)
}
inline void Device::set_extensions(const char* value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Device.extensions)
}
inline void Device::set_extensions(const char* value, size_t size) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Device.extensions)
}
inline ::std::string* Device::mutable_extensions() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Device.extensions)
  return extensions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_extensions() {
  
  return extensions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_extensions(::std::string* extensions) {
  if (extensions != NULL) {
    
  } else {
    
  }
  extensions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extensions);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Device.extensions)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sacred

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sacred::proto::Device_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sacred::proto::Device_Type>() {
  return ::sacred::proto::Device_Type_descriptor();
}
template <> struct is_proto_enum< ::sacred::proto::Device_FloatingPointConfiguration> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sacred::proto::Device_FloatingPointConfiguration>() {
  return ::sacred::proto::Device_FloatingPointConfiguration_descriptor();
}
template <> struct is_proto_enum< ::sacred::proto::Device_MemoryCacheType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sacred::proto::Device_MemoryCacheType>() {
  return ::sacred::proto::Device_MemoryCacheType_descriptor();
}
template <> struct is_proto_enum< ::sacred::proto::Device_LocalMemoryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sacred::proto::Device_LocalMemoryType>() {
  return ::sacred::proto::Device_LocalMemoryType_descriptor();
}
template <> struct is_proto_enum< ::sacred::proto::Device_ExecutionCapability> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sacred::proto::Device_ExecutionCapability>() {
  return ::sacred::proto::Device_ExecutionCapability_descriptor();
}
template <> struct is_proto_enum< ::sacred::proto::Device_QueueProperty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sacred::proto::Device_QueueProperty>() {
  return ::sacred::proto::Device_QueueProperty_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sacred_2fproto_2fopencl_2eproto__INCLUDED
