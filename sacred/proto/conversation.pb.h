// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sacred/proto/conversation.proto

#ifndef PROTOBUF_sacred_2fproto_2fconversation_2eproto__INCLUDED
#define PROTOBUF_sacred_2fproto_2fconversation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sacred {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
void protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto();
void protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto();

class Conversation;
class DataSet;
class Speaker;
class Turn;
class Utterance;
class Word;

// ===================================================================

class Speaker : public ::google::protobuf::Message {
 public:
  Speaker();
  virtual ~Speaker();

  Speaker(const Speaker& from);

  inline Speaker& operator=(const Speaker& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Speaker& default_instance();

  void Swap(Speaker* other);

  // implements Message ----------------------------------------------

  inline Speaker* New() const { return New(NULL); }

  Speaker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Speaker& from);
  void MergeFrom(const Speaker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Speaker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:sacred.proto.Speaker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto();

  void InitAsDefaultInstance();
  static Speaker* default_instance_;
};
// -------------------------------------------------------------------

class Word : public ::google::protobuf::Message {
 public:
  Word();
  virtual ~Word();

  Word(const Word& from);

  inline Word& operator=(const Word& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Word& default_instance();

  void Swap(Word* other);

  // implements Message ----------------------------------------------

  inline Word* New() const { return New(NULL); }

  Word* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Word& from);
  void MergeFrom(const Word& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Word* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional string spelling = 2;
  void clear_spelling();
  static const int kSpellingFieldNumber = 2;
  const ::std::string& spelling() const;
  void set_spelling(const ::std::string& value);
  void set_spelling(const char* value);
  void set_spelling(const char* value, size_t size);
  ::std::string* mutable_spelling();
  ::std::string* release_spelling();
  void set_allocated_spelling(::std::string* spelling);

  // @@protoc_insertion_point(class_scope:sacred.proto.Word)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::internal::ArenaStringPtr spelling_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto();

  void InitAsDefaultInstance();
  static Word* default_instance_;
};
// -------------------------------------------------------------------

class Utterance : public ::google::protobuf::Message {
 public:
  Utterance();
  virtual ~Utterance();

  Utterance(const Utterance& from);

  inline Utterance& operator=(const Utterance& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Utterance& default_instance();

  void Swap(Utterance* other);

  // implements Message ----------------------------------------------

  inline Utterance* New() const { return New(NULL); }

  Utterance* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Utterance& from);
  void MergeFrom(const Utterance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Utterance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sacred.proto.Word word = 1;
  int word_size() const;
  void clear_word();
  static const int kWordFieldNumber = 1;
  const ::sacred::proto::Word& word(int index) const;
  ::sacred::proto::Word* mutable_word(int index);
  ::sacred::proto::Word* add_word();
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Word >*
      mutable_word();
  const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Word >&
      word() const;

  // optional string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:sacred.proto.Utterance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Word > word_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto();

  void InitAsDefaultInstance();
  static Utterance* default_instance_;
};
// -------------------------------------------------------------------

class Turn : public ::google::protobuf::Message {
 public:
  Turn();
  virtual ~Turn();

  Turn(const Turn& from);

  inline Turn& operator=(const Turn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Turn& default_instance();

  void Swap(Turn* other);

  // implements Message ----------------------------------------------

  inline Turn* New() const { return New(NULL); }

  Turn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Turn& from);
  void MergeFrom(const Turn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Turn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sacred.proto.Speaker speaker = 1;
  bool has_speaker() const;
  void clear_speaker();
  static const int kSpeakerFieldNumber = 1;
  const ::sacred::proto::Speaker& speaker() const;
  ::sacred::proto::Speaker* mutable_speaker();
  ::sacred::proto::Speaker* release_speaker();
  void set_allocated_speaker(::sacred::proto::Speaker* speaker);

  // repeated .sacred.proto.Utterance utterance = 2;
  int utterance_size() const;
  void clear_utterance();
  static const int kUtteranceFieldNumber = 2;
  const ::sacred::proto::Utterance& utterance(int index) const;
  ::sacred::proto::Utterance* mutable_utterance(int index);
  ::sacred::proto::Utterance* add_utterance();
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Utterance >*
      mutable_utterance();
  const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Utterance >&
      utterance() const;

  // @@protoc_insertion_point(class_scope:sacred.proto.Turn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::sacred::proto::Speaker* speaker_;
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Utterance > utterance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto();

  void InitAsDefaultInstance();
  static Turn* default_instance_;
};
// -------------------------------------------------------------------

class Conversation : public ::google::protobuf::Message {
 public:
  Conversation();
  virtual ~Conversation();

  Conversation(const Conversation& from);

  inline Conversation& operator=(const Conversation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Conversation& default_instance();

  void Swap(Conversation* other);

  // implements Message ----------------------------------------------

  inline Conversation* New() const { return New(NULL); }

  Conversation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Conversation& from);
  void MergeFrom(const Conversation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Conversation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sacred.proto.Turn turn = 1;
  int turn_size() const;
  void clear_turn();
  static const int kTurnFieldNumber = 1;
  const ::sacred::proto::Turn& turn(int index) const;
  ::sacred::proto::Turn* mutable_turn(int index);
  ::sacred::proto::Turn* add_turn();
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Turn >*
      mutable_turn();
  const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Turn >&
      turn() const;

  // @@protoc_insertion_point(class_scope:sacred.proto.Conversation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Turn > turn_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto();

  void InitAsDefaultInstance();
  static Conversation* default_instance_;
};
// -------------------------------------------------------------------

class DataSet : public ::google::protobuf::Message {
 public:
  DataSet();
  virtual ~DataSet();

  DataSet(const DataSet& from);

  inline DataSet& operator=(const DataSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSet& default_instance();

  void Swap(DataSet* other);

  // implements Message ----------------------------------------------

  inline DataSet* New() const { return New(NULL); }

  DataSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataSet& from);
  void MergeFrom(const DataSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sacred.proto.Conversation conversation = 1;
  int conversation_size() const;
  void clear_conversation();
  static const int kConversationFieldNumber = 1;
  const ::sacred::proto::Conversation& conversation(int index) const;
  ::sacred::proto::Conversation* mutable_conversation(int index);
  ::sacred::proto::Conversation* add_conversation();
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Conversation >*
      mutable_conversation();
  const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Conversation >&
      conversation() const;

  // @@protoc_insertion_point(class_scope:sacred.proto.DataSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::sacred::proto::Conversation > conversation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_AssignDesc_sacred_2fproto_2fconversation_2eproto();
  friend void protobuf_ShutdownFile_sacred_2fproto_2fconversation_2eproto();

  void InitAsDefaultInstance();
  static DataSet* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Speaker

// optional uint64 id = 1;
inline void Speaker::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Speaker::id() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Speaker.id)
  return id_;
}
inline void Speaker::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Speaker.id)
}

// optional string name = 2;
inline void Speaker::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Speaker::name() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Speaker.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Speaker::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Speaker.name)
}
inline void Speaker::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Speaker.name)
}
inline void Speaker::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Speaker.name)
}
inline ::std::string* Speaker::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Speaker.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Speaker::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Speaker::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Speaker.name)
}

// -------------------------------------------------------------------

// Word

// optional uint64 id = 1;
inline void Word::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Word::id() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Word.id)
  return id_;
}
inline void Word::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sacred.proto.Word.id)
}

// optional string spelling = 2;
inline void Word::clear_spelling() {
  spelling_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Word::spelling() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Word.spelling)
  return spelling_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Word::set_spelling(const ::std::string& value) {
  
  spelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Word.spelling)
}
inline void Word::set_spelling(const char* value) {
  
  spelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Word.spelling)
}
inline void Word::set_spelling(const char* value, size_t size) {
  
  spelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Word.spelling)
}
inline ::std::string* Word::mutable_spelling() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Word.spelling)
  return spelling_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Word::release_spelling() {
  
  return spelling_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Word::set_allocated_spelling(::std::string* spelling) {
  if (spelling != NULL) {
    
  } else {
    
  }
  spelling_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spelling);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Word.spelling)
}

// -------------------------------------------------------------------

// Utterance

// repeated .sacred.proto.Word word = 1;
inline int Utterance::word_size() const {
  return word_.size();
}
inline void Utterance::clear_word() {
  word_.Clear();
}
inline const ::sacred::proto::Word& Utterance::word(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Utterance.word)
  return word_.Get(index);
}
inline ::sacred::proto::Word* Utterance::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.Utterance.word)
  return word_.Mutable(index);
}
inline ::sacred::proto::Word* Utterance::add_word() {
  // @@protoc_insertion_point(field_add:sacred.proto.Utterance.word)
  return word_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sacred::proto::Word >*
Utterance::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Utterance.word)
  return &word_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Word >&
Utterance::word() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Utterance.word)
  return word_;
}

// optional string text = 2;
inline void Utterance::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Utterance::text() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Utterance.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utterance::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sacred.proto.Utterance.text)
}
inline void Utterance::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sacred.proto.Utterance.text)
}
inline void Utterance::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sacred.proto.Utterance.text)
}
inline ::std::string* Utterance::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:sacred.proto.Utterance.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Utterance::release_text() {
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Utterance::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Utterance.text)
}

// -------------------------------------------------------------------

// Turn

// optional .sacred.proto.Speaker speaker = 1;
inline bool Turn::has_speaker() const {
  return !_is_default_instance_ && speaker_ != NULL;
}
inline void Turn::clear_speaker() {
  if (GetArenaNoVirtual() == NULL && speaker_ != NULL) delete speaker_;
  speaker_ = NULL;
}
inline const ::sacred::proto::Speaker& Turn::speaker() const {
  // @@protoc_insertion_point(field_get:sacred.proto.Turn.speaker)
  return speaker_ != NULL ? *speaker_ : *default_instance_->speaker_;
}
inline ::sacred::proto::Speaker* Turn::mutable_speaker() {
  
  if (speaker_ == NULL) {
    speaker_ = new ::sacred::proto::Speaker;
  }
  // @@protoc_insertion_point(field_mutable:sacred.proto.Turn.speaker)
  return speaker_;
}
inline ::sacred::proto::Speaker* Turn::release_speaker() {
  
  ::sacred::proto::Speaker* temp = speaker_;
  speaker_ = NULL;
  return temp;
}
inline void Turn::set_allocated_speaker(::sacred::proto::Speaker* speaker) {
  delete speaker_;
  speaker_ = speaker;
  if (speaker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sacred.proto.Turn.speaker)
}

// repeated .sacred.proto.Utterance utterance = 2;
inline int Turn::utterance_size() const {
  return utterance_.size();
}
inline void Turn::clear_utterance() {
  utterance_.Clear();
}
inline const ::sacred::proto::Utterance& Turn::utterance(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Turn.utterance)
  return utterance_.Get(index);
}
inline ::sacred::proto::Utterance* Turn::mutable_utterance(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.Turn.utterance)
  return utterance_.Mutable(index);
}
inline ::sacred::proto::Utterance* Turn::add_utterance() {
  // @@protoc_insertion_point(field_add:sacred.proto.Turn.utterance)
  return utterance_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sacred::proto::Utterance >*
Turn::mutable_utterance() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Turn.utterance)
  return &utterance_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Utterance >&
Turn::utterance() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Turn.utterance)
  return utterance_;
}

// -------------------------------------------------------------------

// Conversation

// repeated .sacred.proto.Turn turn = 1;
inline int Conversation::turn_size() const {
  return turn_.size();
}
inline void Conversation::clear_turn() {
  turn_.Clear();
}
inline const ::sacred::proto::Turn& Conversation::turn(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.Conversation.turn)
  return turn_.Get(index);
}
inline ::sacred::proto::Turn* Conversation::mutable_turn(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.Conversation.turn)
  return turn_.Mutable(index);
}
inline ::sacred::proto::Turn* Conversation::add_turn() {
  // @@protoc_insertion_point(field_add:sacred.proto.Conversation.turn)
  return turn_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sacred::proto::Turn >*
Conversation::mutable_turn() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.Conversation.turn)
  return &turn_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Turn >&
Conversation::turn() const {
  // @@protoc_insertion_point(field_list:sacred.proto.Conversation.turn)
  return turn_;
}

// -------------------------------------------------------------------

// DataSet

// repeated .sacred.proto.Conversation conversation = 1;
inline int DataSet::conversation_size() const {
  return conversation_.size();
}
inline void DataSet::clear_conversation() {
  conversation_.Clear();
}
inline const ::sacred::proto::Conversation& DataSet::conversation(int index) const {
  // @@protoc_insertion_point(field_get:sacred.proto.DataSet.conversation)
  return conversation_.Get(index);
}
inline ::sacred::proto::Conversation* DataSet::mutable_conversation(int index) {
  // @@protoc_insertion_point(field_mutable:sacred.proto.DataSet.conversation)
  return conversation_.Mutable(index);
}
inline ::sacred::proto::Conversation* DataSet::add_conversation() {
  // @@protoc_insertion_point(field_add:sacred.proto.DataSet.conversation)
  return conversation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sacred::proto::Conversation >*
DataSet::mutable_conversation() {
  // @@protoc_insertion_point(field_mutable_list:sacred.proto.DataSet.conversation)
  return &conversation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sacred::proto::Conversation >&
DataSet::conversation() const {
  // @@protoc_insertion_point(field_list:sacred.proto.DataSet.conversation)
  return conversation_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sacred

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sacred_2fproto_2fconversation_2eproto__INCLUDED
